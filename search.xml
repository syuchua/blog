<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VSCode常用快捷键及插件</title>
    <url>/posts/f82e/</url>
    <content><![CDATA[<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li><p>单行注释：<code>[ctrl+k,ctrl+c] 或 ctrl+/</code></p>
</li>
<li><p> 取消单行注释：<code>[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</code></p>
</li>
<li><p>多行注释：<code>[alt+shift+A]</code></p>
</li>
<li><p> 多行注释：<code>/**</code></p>
</li>
</ul>
<span id="more"></span>

<h2 id="移动行"><a href="#移动行" class="headerlink" title="移动行"></a>移动行</h2><p><code>alt+up/down</code></p>
<h2 id="显示-隐藏左侧目录栏"><a href="#显示-隐藏左侧目录栏" class="headerlink" title="显示&#x2F;隐藏左侧目录栏"></a>显示&#x2F;隐藏左侧目录栏</h2><p><code>Ctrl+b</code></p>
<h2 id="复制当前行"><a href="#复制当前行" class="headerlink" title="复制当前行"></a>复制当前行</h2><p><code>shift + alt +up/down</code></p>
<h2 id="删除当前行"><a href="#删除当前行" class="headerlink" title="删除当前行"></a>删除当前行</h2><p><code>shift + ctrl + k</code></p>
<h2 id="控制台终端显示与隐藏"><a href="#控制台终端显示与隐藏" class="headerlink" title="控制台终端显示与隐藏"></a>控制台终端显示与隐藏</h2><p><code>Ctrl + ~</code></p>
<h2 id="查找文件-安装vs-code-插件地址"><a href="#查找文件-安装vs-code-插件地址" class="headerlink" title="查找文件&#x2F;安装vs code 插件地址"></a>查找文件&#x2F;安装vs code 插件地址</h2><p><code>Ctrl + p</code></p>
<h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><p><code>shift + alt + f</code></p>
<h2 id="新建窗口"><a href="#新建窗口" class="headerlink" title="新建窗口"></a>新建窗口</h2><p><code>ctrl + shift + n</code></p>
<h2 id="行增加缩进"><a href="#行增加缩进" class="headerlink" title="行增加缩进"></a>行增加缩进</h2><p><code>Ctrl + [</code></p>
<h2 id="行减少缩进"><a href="#行减少缩进" class="headerlink" title="行减少缩进"></a>行减少缩进</h2><p><code>Ctrl + ]</code></p>
<h2 id="裁剪尾随空格"><a href="#裁剪尾随空格" class="headerlink" title="裁剪尾随空格"></a>裁剪尾随空格</h2><p><code>Ctrl + shift + x</code></p>
<h2 id="字体放大-缩小"><a href="#字体放大-缩小" class="headerlink" title="字体放大(缩小)"></a>字体放大(缩小)</h2><p><code>Ctrl + (或-)</code></p>
<h2 id="拆分编辑器"><a href="#拆分编辑器" class="headerlink" title="拆分编辑器"></a>拆分编辑器</h2><p><code>Ctrl +1/2/3</code></p>
<h2 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h2><p><code>ctrl + shift + left/right</code></p>
<h2 id="关闭编辑器窗口"><a href="#关闭编辑器窗口" class="headerlink" title="关闭编辑器窗口"></a>关闭编辑器窗口</h2><p><code>Ctrl + w</code></p>
<h2 id="关闭所有窗口"><a href="#关闭所有窗口" class="headerlink" title="关闭所有窗口"></a>关闭所有窗口</h2><p><code>Ctrl + k + w</code></p>
<h2 id="切换全屏"><a href="#切换全屏" class="headerlink" title="切换全屏"></a>切换全屏</h2><p><code>f11</code></p>
<h2 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h2><p><code>alt + z</code></p>
<h2 id="显示Git"><a href="#显示Git" class="headerlink" title="显示Git"></a>显示Git</h2><p><code>Ctrl + shift + g</code></p>
<h2 id="全局查找文件"><a href="#全局查找文件" class="headerlink" title="全局查找文件"></a>全局查找文件</h2><p><code>Ctrl + shift + f</code></p>
<h2 id="显示相关插件的命令-如：git-log"><a href="#显示相关插件的命令-如：git-log" class="headerlink" title="显示相关插件的命令(如：git log)"></a>显示相关插件的命令(如：git log)</h2><p><code>Ctrl + shift + p</code></p>
<h2 id="选中文字"><a href="#选中文字" class="headerlink" title="选中文字"></a>选中文字</h2><p><code>shift + left / right / up / down</code></p>
<h2 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h2><p><code>ctrl + k + 0-9 (0是完全折叠)</code></p>
<h2 id="展开代码"><a href="#展开代码" class="headerlink" title="展开代码"></a>展开代码</h2><p><code>ctrl + k + j (完全展开代码)</code></p>
<h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><p><code>Ctrl + shift + k</code></p>
<h2 id="快速切换主题"><a href="#快速切换主题" class="headerlink" title="快速切换主题"></a>快速切换主题</h2><p><code>Ctrl + k/Ctrl + t</code></p>
<h2 id="快速回到顶部-底部"><a href="#快速回到顶部-底部" class="headerlink" title="快速回到顶部&#x2F;底部"></a>快速回到顶部&#x2F;底部</h2><p><code>Ctrl + home/end</code></p>
<h2 id="格式化选定代码"><a href="#格式化选定代码" class="headerlink" title="格式化选定代码"></a>格式化选定代码</h2><p><code>Ctrl + k/f</code></p>
<h2 id="选中代码"><a href="#选中代码" class="headerlink" title="选中代码"></a>选中代码</h2><p><code>shift + 鼠标左键</code></p>
<h2 id="多行同时添加内容（光标）"><a href="#多行同时添加内容（光标）" class="headerlink" title="多行同时添加内容（光标）"></a>多行同时添加内容（光标）</h2><p><code>ctrl + alt + up/down</code></p>
<h2 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h2><p><code>ctrl + shift + h</code></p>
<h2 id="当前文件替换"><a href="#当前文件替换" class="headerlink" title="当前文件替换"></a>当前文件替换</h2><p><code>Ctrl + h</code></p>
<h2 id="打开最近打开的文件"><a href="#打开最近打开的文件" class="headerlink" title="打开最近打开的文件"></a>打开最近打开的文件</h2><p><code>Ctrl + r</code></p>
<h2 id="打开新的命令窗"><a href="#打开新的命令窗" class="headerlink" title="打开新的命令窗"></a>打开新的命令窗</h2><p><code>ctrl + shift + c</code></p>
<h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><h3 id="1、Auto-Rename-Tag"><a href="#1、Auto-Rename-Tag" class="headerlink" title="1、Auto Rename Tag"></a>1、Auto Rename Tag</h3><p>修改html标签，自动帮你完成尾部闭合标签的同步修改，和webstorm一样。</p>
<h3 id="2、Auto-Close-Tag"><a href="#2、Auto-Close-Tag" class="headerlink" title="2、Auto Close Tag"></a>2、Auto Close Tag</h3><p>自动闭合HTML标签</p>
<h3 id="4、Beautiful"><a href="#4、Beautiful" class="headerlink" title="4、Beautiful"></a>4、Beautiful</h3><p>格式化代码的工具</p>
<h3 id="5、Dash-Dash"><a href="#5、Dash-Dash" class="headerlink" title="5、Dash Dash"></a>5、Dash Dash</h3><p>是MacOS的API文档浏览器和代码段管理器</p>
<h3 id="6、Ejs-Snippets-ejs"><a href="#6、Ejs-Snippets-ejs" class="headerlink" title="6、Ejs Snippets ejs"></a>6、Ejs Snippets ejs</h3><p>代码提示</p>
<h3 id="7、ESLint"><a href="#7、ESLint" class="headerlink" title="7、ESLint"></a>7、ESLint</h3><p>检查javascript语法错误与提示</p>
<h3 id="8、File-Navigator"><a href="#8、File-Navigator" class="headerlink" title="8、File Navigator"></a>8、File Navigator</h3><p>快速查找文件</p>
<h3 id="9、Git-History-git-log"><a href="#9、Git-History-git-log" class="headerlink" title="9、Git History(git log)"></a>9、Git History(git log)</h3><p>查看git log</p>
<h3 id="10、Gulp-Snippets"><a href="#10、Gulp-Snippets" class="headerlink" title="10、Gulp Snippets"></a>10、Gulp Snippets</h3><p>写gulp时用到，gulp语法提示。</p>
<h3 id="11、HTML-CSS-Support"><a href="#11、HTML-CSS-Support" class="headerlink" title="11、HTML CSS Support"></a>11、HTML CSS Support</h3><p>在HTML标签上写class智能提示当前项目所支持的样式</p>
<h3 id="12、HTML-Snippets"><a href="#12、HTML-Snippets" class="headerlink" title="12、HTML Snippets"></a>12、HTML Snippets</h3><p>超级好用且初级的H5代码片段以及提示</p>
<h3 id="13、Debug-for-Chrome"><a href="#13、Debug-for-Chrome" class="headerlink" title="13、Debug for Chrome"></a>13、Debug for Chrome</h3><p>让vs code映射chrome的debug功能，静态页面都可以用vscode来打断点调试、配饰稍微复杂一点</p>
<h3 id="14、Document-this"><a href="#14、Document-this" class="headerlink" title="14、Document this"></a>14、Document this</h3><p>Js的注释模板</p>
<h3 id="15、jQuery-Code-Snippets"><a href="#15、jQuery-Code-Snippets" class="headerlink" title="15、jQuery Code Snippets"></a>15、jQuery Code Snippets</h3><p>jquery提示工具</p>
<h3 id="16、Html2jade"><a href="#16、Html2jade" class="headerlink" title="16、Html2jade"></a>16、Html2jade</h3><p>html模板转pug模板</p>
<h3 id="17、JS-CSS-HTML"><a href="#17、JS-CSS-HTML" class="headerlink" title="17、JS-CSS-HTML"></a>17、JS-CSS-HTML</h3><p>Formatter 格式化</p>
<h3 id="18、Npm-intellisense"><a href="#18、Npm-intellisense" class="headerlink" title="18、Npm intellisense"></a>18、Npm intellisense</h3><p>require 时的包提示工具</p>
<h3 id="19、Open-in-browser"><a href="#19、Open-in-browser" class="headerlink" title="19、Open in browser"></a>19、Open in browser</h3><p>打开默认浏览器</p>
<h3 id="20、One-Dark-Theme"><a href="#20、One-Dark-Theme" class="headerlink" title="20、One Dark Theme"></a>20、One Dark Theme</h3><p>一个vs code的主题</p>
<h3 id="21、Path-Intellisense"><a href="#21、Path-Intellisense" class="headerlink" title="21、Path Intellisense"></a>21、Path Intellisense</h3><p>自动路径补全、默认不带这个功能</p>
<h3 id="22、Project-Manager"><a href="#22、Project-Manager" class="headerlink" title="22、Project Manager"></a>22、Project Manager</h3><p>多个项目之间快速切换的工具</p>
<h3 id="23、Typings-auto-installer"><a href="#23、Typings-auto-installer" class="headerlink" title="23、Typings auto installer"></a>23、Typings auto installer</h3><p>安装vscode 的代码提示依赖库，基于typtings的</p>
<h3 id="24、View-In-Browser"><a href="#24、View-In-Browser" class="headerlink" title="24、View In Browser"></a>24、View In Browser</h3><p>默认浏览器查看HTML文件（快捷键Ctrl+F1可以修改）</p>
<h3 id="25、Vscode-icons"><a href="#25、Vscode-icons" class="headerlink" title="25、Vscode-icons"></a>25、Vscode-icons</h3><p>让vscode资源目录加上图标、必备</p>
<h3 id="26、VueHelper"><a href="#26、VueHelper" class="headerlink" title="26、VueHelper"></a>26、VueHelper</h3><p>Vue2代码段（包括Vue2 api、vue-router2、vuex2）</p>
<h3 id="27、Vue-2-Snippets"><a href="#27、Vue-2-Snippets" class="headerlink" title="27、Vue 2 Snippets"></a>27、Vue 2 Snippets</h3><p>vue必备vue代码提示</p>
<h3 id="28、Vue-color"><a href="#28、Vue-color" class="headerlink" title="28、Vue-color"></a>28、Vue-color</h3><p>vue语法高亮主题</p>
<h3 id="29、Auto-Open-Markdown-Preview"><a href="#29、Auto-Open-Markdown-Preview" class="headerlink" title="29、Auto-Open Markdown Preview"></a>29、Auto-Open Markdown Preview</h3><p>markdown文件自动开启预览</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>#vscode</tag>
        <tag>#快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>3分钟搭建一个ChatGPT镜像站，非api，支持官网账号登录</title>
    <url>/posts/b2f3/</url>
    <content><![CDATA[<p>本篇基于github上的开源项目<a href="https://github.com/xyhelper/chatgpt-mirror-server">https://github.com/xyhelper/chatgpt-mirror-server</a>旨在通过简单的操作搭建一个ChatGPT的个人镜像，绕过cloudflare，提升访问速度，且没有烦人的机器人验证步骤，可本地搭建，也可部署在服务器上，通过登录官网账号的方式，非api模式，提高回答准确性。同时，基于共享账号的普遍存在，可以实现成本远低于api模式的GPT4和GPTs使用。</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul>
<li>一台至少 2 核 2G 内存的服务器,推荐使用香港、新加坡、日本地区的服务器,可以 兼顾国内访问。(本地搭建的话可忽略)</li>
<li>安装了 docker 和 docker-compose</li>
<li>安装了 git</li>
<li>有官网直登账号(不支持谷歌、微软、苹果等第三方登陆账号)</li>
<li>一个域名（用于反代，可忽略）</li>
</ul>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>打开服务器，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt upgrade -y &amp;&amp; apt install -y vim wget curl   #出现报错可能是权限问题，用`sudo su`提权至root用户</span><br></pre></td></tr></table></figure>
<h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>直接下载执行官方的一键部署脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSfL https://raw.githubusercontent.com/xyhelper/chatgpt-mirror-server-deploy/master/quick-install.sh | bash</span><br></pre></td></tr></table></figure>

<h1 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/xyhelper/chatgpt-mirror-server-deploy.git chatgpt-mirror                 # 克隆项目地址</span><br><span class="line">cd chatgpt-mirror              #进入根目录</span><br><span class="line">./deploy.sh                    #启动部署脚本，等待拉取docker镜像</span><br></pre></td></tr></table></figure>

<h1 id="进入管理后台进行基础配置"><a href="#进入管理后台进行基础配置" class="headerlink" title="进入管理后台进行基础配置"></a>进入管理后台进行基础配置</h1><p>访问<code>http://服务器ip地址:8200/xyhelper</code></p>
<p>默认用户名<code>admin</code>，密码<code>123456</code><br><img src="https://cloud.yuchu.me/f/8QCY/chat-mirror.jpg"></p>
<p>进入后台左边点击工作台-账号管理，添加自己的ChatGPT官网账号勾选启用（plus用户切记勾选plus），再进入用户管理，添加一个用户，过期日期和user-token都可以自定义，保存。复制user-token，返回首页，粘贴。</p>
<h3 id="一个小细节"><a href="#一个小细节" class="headerlink" title="一个小细节"></a>一个小细节</h3><p>如果你是plus用户，或者使用的是共享账号，想把这个镜像站分享给其他人，又想省去每次都输入token的麻烦，不妨自定义ygusertoken，比方说我设置的是<code>1145141919810hhhhaaa</code>，然后把这个链接：<code>http://yourip:8200/login_token?access_token=1145141919810hhhhaaa</code>分享出去，这样就·不用·每次都登录了。</p>
<h1 id="配置nginx反代"><a href="#配置nginx反代" class="headerlink" title="配置nginx反代"></a>配置nginx反代</h1><p>新建nginx配置目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/nginx</span><br><span class="line"></span><br><span class="line">touch /home/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">mkdir -p /home/nginx/certs</span><br></pre></td></tr></table></figure>

<p>申请证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --register-account -m xxxx@gmail.com   #随便一个邮箱就行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue -d yourip.com --standalone     # yourip.com改为你的域名</span><br></pre></td></tr></table></figure>

<p>下载证书到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d yourip.com --key-file /home/nginx/certs/key.pem --fullchain-file /home/nginx/certs/cert.pem</span><br></pre></td></tr></table></figure>
<p>填写nginx配置文件<br><code>cd /home/nginx/ &amp;&amp; vim nginx.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  client_max_body_size 1000m;  </span><br><span class="line"></span><br><span class="line">  #上传限制参数1G以内文件可上传</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 同理，替换为你的域名</span><br><span class="line"></span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 替换域名</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/certs/cert.pem;</span><br><span class="line"></span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/key.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:8200;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拉取部署nginx容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -p 443:443 -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/nginx/certs:/etc/nginx/certs -v /home/nginx/html:/usr/share/nginx/html nginx:latest</span><br></pre></td></tr></table></figure>

<p>之后就可以用域名访问啦！</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>chatgpt镜像站</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-posh:基于WindowsTerminal的powershell美化教程</title>
    <url>/posts/6611/</url>
    <content><![CDATA[<p>今天来更一篇关于Windows终端美化的教程，先放个成品：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/terminal.jpg"></p>
<p>实现的效果主要有终端半透明、亚克力材质、背景图片以及终端主题。</p>
<h1 id="安装PowerShell-7"><a href="#安装PowerShell-7" class="headerlink" title="安装PowerShell 7"></a>安装PowerShell 7</h1><p>相比于 Windows 默认提供的 Powershell，Powershell 7 拥有以下几个优势：</p>
<ol>
<li>支持跨平台使用，增强了其灵活性和适用范围。</li>
<li>提供了更优越的性能表现。</li>
<li>处于持续更新状态，保证了功能的不断完善和安全性的提升。</li>
<li>简而言之，Powershell 7 是 Powershell 的升级版。</li>
</ol>
<p>  官网地址：</p>
<pre><code>PowerShell 文档 - PowerShell
</code></pre>
<p>  Github 地址：</p>
<pre><code>https://github.com/PowerShell/PowerShell
</code></pre>
<p>  下载地址：</p>
<pre><code>https://github.com/PowerShell/PowerShell/releases/
https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows
</code></pre>
<p>  选择合适自己的安装即可。</p>
<h1 id="安装Windows-Terminal"><a href="#安装Windows-Terminal" class="headerlink" title="安装Windows Terminal"></a>安装Windows Terminal</h1><p>直接去微软商店下载即可：<a href="https://apps.microsoft.com/detail/9n0dx20hk701?hl=zh=CN&gl=CN">https://apps.microsoft.com/detail/9n0dx20hk701?hl=zh=CN&amp;gl=CN</a></p>
<h1 id="安装winget"><a href="#安装winget" class="headerlink" title="安装winget"></a>安装winget</h1><p>一般在Windows10 高于 1709 (Build 16299) 的版本和 Windows11上以及预装了winget，可以通过在命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget --version</span><br></pre></td></tr></table></figure>
<p>确认，如果没有的话可以在微软商店安装：<a href="https://apps.microsoft.com/detail/9nblggh4nns1?hl=zh-CN&gl=CN">https://apps.microsoft.com/detail/9nblggh4nns1?hl=zh-CN&amp;gl=CN</a></p>
<h1 id="修改透明度、亚克力材质和背景图片"><a href="#修改透明度、亚克力材质和背景图片" class="headerlink" title="修改透明度、亚克力材质和背景图片"></a>修改透明度、亚克力材质和背景图片</h1><p>旧版的Windows Terminal需要修改json的配置文件，但新版可以直接在设置界面可视化开启<br>点击设置-外观<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/terminal_set.png"></p>
<p>默认值-外观-背景图像路径，可以自定义图片作为终端背景，再往下拉一点，设置图像不透明度，个人喜欢色调偏暗的，就设定为20%了。<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240507223022.png"></p>
<p>再往下拉一点，就是设定终端界面的不透明度和亚克力材质了。<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240507223442.png"></p>
<p>如果想要差异化的，还可以单独设定不同终端的外观。<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240507223621.png"></p>
<h1 id="安装oh-my-posh"><a href="#安装oh-my-posh" class="headerlink" title="安装oh-my-posh"></a>安装oh-my-posh</h1><p>直接winget就可以安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget search oh-my-posh</span><br></pre></td></tr></table></figure>

<p>如果出现两个结果，一个msstore的一个winget的，随便选一个就行。</p>
<h2 id="设置oh-my-posh主题"><a href="#设置oh-my-posh主题" class="headerlink" title="设置oh-my-posh主题"></a>设置oh-my-posh主题</h2><p>在PowerShell中输入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code $profile    # 没有vscode的话也可以输入notepad $profile 使用记事本打开</span><br></pre></td></tr></table></figure>

<p>在打开的文件中输入这行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh init pwsh --config $env:POSH_THEMES_PATH\peru.omp.json | Invoke-Expression</span><br></pre></td></tr></table></figure>

<p>其中的peru.omp.json即主题配置，可以自行修改，前往<code>C:\Users\&lt;用户名&gt;\AppData\Local\Programs\oh-my-posh\themes</code>目录下即可查看不同配置，可以依次试用，选一个你喜欢的。</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>oh-my-posh</tag>
        <tag>Windows Terminal</tag>
        <tag>powershell</tag>
        <tag>终端美化</tag>
      </tags>
  </entry>
  <entry>
    <title>shizuku:安卓玩机入门指南</title>
    <url>/posts/30e5/</url>
    <content><![CDATA[<h1 id="shizuku是什么？"><a href="#shizuku是什么？" class="headerlink" title="shizuku是什么？"></a>shizuku是什么？</h1><p><code>Shizuku</code> 是一款开源的 ADB（Android Debug Briage）权限管理器。由于现阶段大部分安卓手机都无法解锁获取 ROOT 高级权限，但是用户又需要高级权限对系统进行一些操作，恰好这些功能可以通过 ADB 权限进行解决，比如冻结应用、卸载不想要的系统应用（只有少部分能通过adb卸载，更多的还是建议root）。这种情况下，<code>Shizuku</code> 就是一个非常好的解决方案。</p>
<p>具体关于shizuku是什么，官网已经给出了很明确的解释：<code>Shizuku</code> 可以帮助普通应用借助一个由 app_process 启动的 Java 进程直接以 adb 或 root 特权使用系统 API。简单来说，root权限&gt;<code>shizuku</code>的权限&gt;普通用户，利用这一聊胜于无的权限，我们就已经可以做很多事了。</p>
<h1 id="安装shizuku"><a href="#安装shizuku" class="headerlink" title="安装shizuku"></a>安装shizuku</h1><p>酷安的<code>shizuku</code>下载地址似乎已经被ban了，那就只能用<a href="https://play.google.com/store/apps/details?id=moe.shizuku.privileged.api&pli=1">Google play</a>或者<a href="https://github.com/RikkaApps/Shizuku/releases/download/v13.5.4/shizuku-v13.5.4.r1049.0e53409-release.apk">github</a>下载了，国内用户访问这两个地址不方便的，也可以使用我的<a href="https://cloud.yuchu.me/s/mOsK">cloudreve</a></p>
<h1 id="激活shizuku"><a href="#激活shizuku" class="headerlink" title="激活shizuku"></a>激活shizuku</h1><ul>
<li><p><code>shizuku</code>官方提供了三种激活方式，root激活，连接电脑通过adb激活和无线调试激活。root激活就不提了，我都root了还折腾<code>shizuku</code>干嘛（笑），adb激活需要手边有电脑，总归是不太方便，而且后面我们还会介绍一种更好的方法。现在我们先演示用无线调试激活。</p>
</li>
<li><p>打开手机设置-我的设备（也可能是我的手机或其他类似的选项），找到版本号，连续点击至少5次，直到弹出“您已处于开发者模式”的提示。<br>  返回设置-更多设置-开发者选项，启用无线调试。在 <code>Shizuku</code> 软件内开始配对- 点按“无线调试”中的“使用配对码配对设备”- 在下来菜单的<code>Shizuku</code>的通知中填入配对码</p>
</li>
</ul>
<p>  <img src="https://pic2.zhimg.com/80/v2-939e9ad3fc44143e564d816506713e7d_720w.webp"></p>
<p>  <img src="https://pic4.zhimg.com/80/v2-22abc729f625f8298928f79dc53ccbf3_720w.webp"></p>
<ul>
<li>无效调试激活方案注意事项: 如果无法输入配对码，请在系统-通知样式选项中，将默认通知样式改为 原生样式- 启用无线调试的过程中，部分系统会提示「某个应用遮挡了权限请求界面」，可以尝试关闭系统的侧边栏功能或者关闭掉所有允获取了悬浮窗权限的应用</li>
</ul>
<h2 id="通过黑阈激活"><a href="#通过黑阈激活" class="headerlink" title="通过黑阈激活"></a>通过黑阈激活</h2><p>黑阈是一款不需要root就能待机或强行停止应用的工具，它可以配合shizuku实现对一些流氓应用的限制。但这里我们要用到的是它的另一个功能—指令。</p>
<h3 id="下载安装黑阈"><a href="#下载安装黑阈" class="headerlink" title="下载安装黑阈"></a>下载安装黑阈</h3><p>酷安可以直接下载：<a href="https://www.coolapk.com/apk/me.piebridge.brevent">https://www.coolapk.com/apk/me.piebridge.brevent</a></p>
<p>安装完成后照着上面无线调试激活shizuku的步骤，无线激活黑阈就好了</p>
<p>激活后点击左上角-执行指令<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000077394_origin_IMG_20240429_220943.jpg"></p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh /storage/emulated/0/Android/data/moe.shizuku.privileged.api/start.sh</span><br></pre></td></tr></table></figure>
<p>即可激活<code>shizuku</code>这一步的原理其实与adb激活shizuku类似，不过不需要电脑，好处是适配性更好，也比较方便，仅此更推荐用这种方式激活shizuku。</p>
<h1 id="shizuku常见用法"><a href="#shizuku常见用法" class="headerlink" title="shizuku常见用法"></a>shizuku常见用法</h1><ol>
<li><p><a href="https://www.coolapk.com/apk/com.catchingnow.icebox">使用冰箱冻结应用</a></p>
</li>
<li><p><a href="https://www.coolapk.com/apk/bin.mt.plus">给mt管理器提权，使之能访问Android&#x2F;data目录</a></p>
</li>
<li><p><a href="https://cloud.yuchu.me/s/nRtq">给scene提权，查看CPU运行状态和检测游戏帧率</a></p>
</li>
<li><p><a href="https://cloud.yuchu.me/s/ojuL">给APP Ops提权，更好地监控和管理app权限，对抗摇一摇广告的神！</a></p>
</li>
<li><p><a href="https://cloud.yuchu.me/s/p2CN">给GKD提权，反开屏广告地神！</a></p>
</li>
<li><p><a href="https://cloud.yuchu.me/s/q2FP">给termux提权，在termux里也能访问Android&#x2F;data目录</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>shizuku</tag>
        <tag>安卓玩机</tag>
        <tag>免root框架</tag>
        <tag>黑阈</tag>
        <tag>mt管理器</tag>
        <tag>scene</tag>
        <tag>APP Ops</tag>
        <tag>GKD</tag>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>termux折腾日记之安装jupyter、numpy、pandas和matplotlib</title>
    <url>/posts/baa2/</url>
    <content><![CDATA[<p>前几天因为课程需要折腾了一下遗传算法，因为担心老师课上提问，带电脑又不方便，变突发奇想程序能不能在手机上运行，毕竟手机上也是有终端环境——termux的。但是termux毕竟只是终端，无法生成函数图像。你说x11？算了吧，还不如直接上电脑呢。</p>
<p>于是想到了jupyter——一款支持图像输出的在线强大工具，只需要浏览器就能运行。话不多说，直接上手安装:<br><code>pip install jupyter</code><br>毫无疑问报错了，报的错还看不懂，说是缺了依赖，那我用pkg安装依赖呢？还报错，一会儿说是这个依赖还需要某某依赖，一会又是早轮子报错……没办法，上网找教程吧。</p>
<p>现实是，网上安装jupyter的教程是不少，可大都是PC端的，termux少得可怜，即便有，也大都是三四年前的，不同的人甚至有不同的解决办法，可这些方法都试过一遍后，也都无一例外的失败了。但功夫不负有心人，最后还是在CSDN上找到一篇接近成功的方法，这里贴出原文链接，以供参考:<br><a href="http://t.csdnimg.cn/r7K6y">http://t.csdnimg.cn/r7K6y</a></p>
<p>但这篇博客终究还是有一些瑕疵，索性问题都不是很大，只是一些版本兼容性问题，比方说在安装numpy，matplotlib，pandas，jupyter等的时候因为不同的版本之间不一定兼容，动不动会出现一大堆的报错，解决方法也简单，就是把pip换成pkg安装，因为pip安装往往需要经过编译，而编译又需要某些特定的工具和库，大都是termux环境中没有的，pkg安装则是直接安装pkg中预编译好的二进制文件，早已跳过了通过工具链编译这一步。举个简单的例子，比方说我要安装numpy和pandas，就不必使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy pandas</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATHLIB=&quot;m&quot; pip install pandas</span><br><span class="line">MATHLIB=&quot;m&quot; pip install numpy</span><br></pre></td></tr></table></figure>

<p>而是换成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install -y python-numpy python-pandas</span><br></pre></td></tr></table></figure>

<p>包括在安装jupyter时经常编译出错的pyzmq，也可以这样安装，后面跟上<code>==25.1.1</code>指的是版本，因为pkg和pip总是默认安装最新的，但测试发现目前最新的26.0.2版本(2024年4月底)有兼容问题，遂换成25.1.1版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install -y libzmq libcrypt pkg-config  # 先安装一些必要的依赖库</span><br><span class="line"></span><br><span class="line"># 再通过pkg安装pyzmq</span><br><span class="line"></span><br><span class="line">pkg install -y python-pyzmq==25.1.1</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">pip install pyzmq==25.1.1</span><br></pre></td></tr></table></figure>

<p>安装jupyter中还有一个经常出现的依赖报错是maturin，这是一个rust里的文件，同样是因为一些版本兼容问题，在Python3.11的环境下是无法正常编译安装的，这个时候就只能先安装rust环境，再用cargo安装了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install rust  #安装rust</span><br><span class="line">pkg install binutils-is-llvm</span><br><span class="line">cargo install maturin</span><br><span class="line">pkg install -y libzmq libcrypt pkg-config</span><br><span class="line">pip install clang fftw make freetype # 一些编译有关依赖</span><br><span class="line">pip install ipython  # jupyter依赖ipython</span><br></pre></td></tr></table></figure>

<p>之后再安装jupyter应该就不会报错了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure>

<p>安装matplotlib的过程也是常常因为一些依赖报错，但比起jupyter还是简单不少的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install -y libjpeg-turbo libtiff</span><br><span class="line">pkg install python-pillow</span><br><span class="line">pkg install -y libpng</span><br><span class="line">pkg install matplotlib</span><br></pre></td></tr></table></figure>

<p>总的来说，在termux里折腾jupyter说难不难，说简单也不简单吧，毕竟也是花了我几个小时的时间，最后，我把上面的过程都写成了一个脚本，方便大家自动化安装，地址如下:<br><a href="https://github.com/syuchua/termux-jupyter">https://github.com/syuchua/termux-jupyter</a></p>
<p>如果是直接使用的话可以使用wget下载到本地:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/syuchua/termux-jupyter/master/install.sh -O install.sh</span><br><span class="line">chmod +x install.sh</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/termux-jupyter.jpg"></p>
<p>最后，如果觉得本教程或者这个脚本还可以的话，麻烦给我一个star，谢谢！</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>jupyter</tag>
        <tag>numpy</tag>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>winget的基础配置与使用</title>
    <url>/posts/8eff/</url>
    <content><![CDATA[<h1 id="1-什么是winget"><a href="#1-什么是winget" class="headerlink" title="1.什么是winget"></a>1.什么是winget</h1><p>微软公司在 2020 年 5 月 Microsoft Build 开发者大会上发布了用于 Windows 系统的官方支持的软件包管理器 —— Windows 软件包管理器（Windows Package Manager），也就是 WinGet 软件包管理器。经过 3 年的发展，越来越多的软件厂商在这个平台上发布自家软件。WinGet 除了支持 exe、msi 等传统的 Win32 安装包格式外，还支持用于新版 Windows 的 msix&#x2F;msixbundle 格式所打包的软件。</p>
<p><a href="https://learn.microsoft.com/en-us/windows/package-manager">Windows软件包管理工具</a></p>
<span id="more"></span>

<h1 id="2-获取winget"><a href="#2-获取winget" class="headerlink" title="2.获取winget"></a>2.获取winget</h1><p>首先确认系统是否满足需求：WinGet 只可以运行在 Windows10 高于 1709 (Build 16299) 的版本和 Windows11 上。</p>
<p>在安装 WinGet 之前，建议使用微软新推出的终端模拟器 Windows Terminal 代替传统的conhost.exe。</p>
<h2 id="2-1-Windows10-11-非-LTS-版本（家庭版、教育版、专业版、专业工作站版、企业版）"><a href="#2-1-Windows10-11-非-LTS-版本（家庭版、教育版、专业版、专业工作站版、企业版）" class="headerlink" title="2.1 Windows10&#x2F;11 非 LTS 版本（家庭版、教育版、专业版、专业工作站版、企业版）"></a>2.1 Windows10&#x2F;11 非 LTS 版本（家庭版、教育版、专业版、专业工作站版、企业版）</h2><p>Windows Terminal 和 WinGet 都可以通过系统预装的 Microsoft Store 商店搜索安装，也可以转到下面的网页调用 Microsoft Store 安装，也可以去微软托管在 GitHub 的发布页下载安装包到本地安装（较新版本的 Windows11 已经预装，如已预装请略过此章节）</p>
<h3 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h3><p><a href="https://apps.microsoft.com/detail/9n0dx20hk701?hl=zh=CN&gl=CN">Windows Terminal</a></p>
<h3 id="Winget"><a href="#Winget" class="headerlink" title="Winget"></a>Winget</h3><p><a href="https://apps.microsoft.com/detail/9nblggh4nns1?hl=zh-CN&gl=CN">Winget</a></p>
<h2 id="2-2-设置-Windows-Terminal-为系统默认终端模拟器"><a href="#2-2-设置-Windows-Terminal-为系统默认终端模拟器" class="headerlink" title="2.2 设置 Windows Terminal 为系统默认终端模拟器"></a>2.2 设置 Windows Terminal 为系统默认终端模拟器</h2><p>较新版本的 Windows11 已经默认 Windows Terminal 为系统终端模拟器，如已配置好请略过此章节。</p>
<p>从命令行窗口标题栏右键菜单进入默认设置,在【终端】选项卡下更改“默认终端应用程序”为“Windows 终端”，确认退出.</p>
<h2 id="3-使用-WinGet-管理软件"><a href="#3-使用-WinGet-管理软件" class="headerlink" title="3. 使用 WinGet 管理软件"></a>3. 使用 WinGet 管理软件</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>查看版本、信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget -v(winget --version)   #显示winget版本</span><br><span class="line">winget info                   #显示常规信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget source remove winget</span><br><span class="line">winget source add winget https://mirrors.ustc.edu.cn/winget-source</span><br></pre></td></tr></table></figure></li>
<li><p>搜索软件包<br><code>winget search [包名]</code><br>以7zip为例<br><img src="https://cloud.yuchu.me/f/L1hQ/winget_search.png" alt="winget_search"></p>
</li>
<li><p>查看软件包<br><code>winget show --id 7zip.7zip</code><br><img src="https://cloud.yuchu.me/f/KEf4/winget_show.png" alt="winget_show"></p>
</li>
<li><p>安装软件包<br><code>winget install --id 7zip.7zip</code></p>
</li>
<li><p>自定义安装<br><code>winget install --id 7zip.7zip -i</code></p>
</li>
</ul>
<p>-指定位置安装<br><code>winget install -l,--location [指定路径(如支持)]</code></p>
<ul>
<li><p>更新软件包<br><code>winget upgrade --id 7zip.7zip</code></p>
</li>
<li><p>卸载软件包<br><code>winget uninstall --id 7zip.7zip</code></p>
</li>
<li><p>显示已安装的软件包<br><code>winget list</code></p>
</li>
</ul>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul>
<li><p><code>winget search --id [包名]                                    #按id筛选结果</code></p>
</li>
<li><p><code>winget search --name [包名]                                  #按名称筛选</code></p>
</li>
<li><p><code>winget search --tag [包名]                                   #按标签筛选</code></p>
</li>
<li><p><code>winget search -s,--source [包名]                             #指定源查找</code></p>
</li>
<li><p><code>winget search -e,--exact [包名]                              #精确匹配查找</code></p>
</li>
<li><p><code>winget search --version [包名]                               #显示软件包可用版本</code></p>
</li>
<li><p><code>winget install --id/--name/--tag/-e,--exact/--version [包名] #与search类似</code></p>
</li>
<li><p><code>winget install --ignore-security-hash [包名]                 #忽略安装程序哈希检查失败</code></p>
</li>
</ul>
<h1 id="进阶—使用PowerShell-脚本从网络批量下载来自-WinGet-的软件包"><a href="#进阶—使用PowerShell-脚本从网络批量下载来自-WinGet-的软件包" class="headerlink" title="进阶—使用PowerShell 脚本从网络批量下载来自 WinGet 的软件包"></a>进阶—使用PowerShell 脚本从网络批量下载来自 WinGet 的软件包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Requires -Version 7.0</span><br><span class="line"></span><br><span class="line">#更改字符集为UTF-8</span><br><span class="line">#[System.Console]::OutputEncoding=[System.Text.Encoding]::GetEncoding(65001)</span><br><span class="line"></span><br><span class="line"># 更新源</span><br><span class="line"># winget source reset winget</span><br><span class="line"># winget source add winget https://mirrors.ustc.edu.cn/winget-source/</span><br><span class="line"></span><br><span class="line">Clear-Host</span><br><span class="line"></span><br><span class="line"># 写入安装脚本</span><br><span class="line">$Script:PackageCount = 0</span><br><span class="line">$Script:PackageLocalPath = &quot;PackageInstallers&quot;</span><br><span class="line">$Script:PackageList = &quot;PackageInstallers.log&quot;</span><br><span class="line">$Script:PackageScriptIWR = &quot;Get-PackageInstallersIWR.ps1&quot;</span><br><span class="line">$Script:PackageScriptSBT = &quot;Get-PackageInstallersSBT.ps1&quot;</span><br><span class="line">$Script:PackageScriptWCD = &quot;Get-PackageInstallersWCD.ps1&quot;</span><br><span class="line">$Script:PackageLogIWR = [System.String]::Concat($Script:PackageLocalPath, &quot;\PackageInstallersIWR.log&quot;)</span><br><span class="line">$Script:PackageLogSBT = [System.String]::Concat($Script:PackageLocalPath, &quot;\PackageInstallersSBT.log&quot;)</span><br><span class="line">$Script:PackageLogWCD = [System.String]::Concat($Script:PackageLocalPath, &quot;\PackageInstallersWCD.log&quot;)</span><br><span class="line"></span><br><span class="line">New-Item -Name $Script:PackageLocalPath -ItemType Directory -Force | Out-Null</span><br><span class="line">Remove-Item $Script:PackageLocalPath\* -Recurse -Force | Out-Null</span><br><span class="line"></span><br><span class="line">Write-Output $null | Out-File $Script:PackageList</span><br><span class="line">Write-Output $null | Out-File $Script:PackageScriptIWR</span><br><span class="line">Write-Output $null | Out-File $Script:PackageScriptSBT</span><br><span class="line">Write-Output $null | Out-File $Script:PackageScriptWCD</span><br><span class="line"></span><br><span class="line">[System.String]::Concat(&quot;# Updated @ &quot;, (Get-Date -Format &quot;yyyy.MM.dd-HH:mm:ss&quot;)) | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;# Requires -Version 7.0&quot; | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;`$Script:PackageLocalCount = 0&quot; | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;Clear-Host&quot; | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;New-Item -Name `&quot;$Script:PackageLocalPath`&quot; -ItemType Directory -Force | Out-Null&quot; | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;Remove-Item `&quot;$Script:PackageLocalPath\*`&quot; -Recurse -Force | Out-Null&quot; | Tee-Object $Script:PackageScriptIWR -Append | Tee-Object $Script:PackageScriptSBT -Append | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line">Write-Output &quot;Write-Output `$null | Out-File `&quot;$Script:PackageLogIWR`&quot;&quot; | Out-File $Script:PackageScriptIWR -Append</span><br><span class="line">Write-Output &quot;Write-Output `$null | Out-File `&quot;$Script:PackageLogSBT`&quot;&quot; | Out-File $Script:PackageScriptSBT -Append</span><br><span class="line">Write-Output &quot;Write-Output `$null | Out-File `&quot;$Script:PackageLogWCD`&quot;&quot; | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line"></span><br><span class="line"># 安装脚本函数</span><br><span class="line">function Get-WinGetPackageURL &#123;</span><br><span class="line">    param($ID, $Name, $Type, $Class)</span><br><span class="line"></span><br><span class="line">    $Private:PackageWinGetID = $ID</span><br><span class="line">    $Private:PackageFilename = $Name</span><br><span class="line">    $Private:PackageFiletype = $Type</span><br><span class="line">    $Private:PackageClassification = $Class</span><br><span class="line">    $Private:PackageLocalClassifiedPath = [System.String]::Concat($Script:PackageLocalPath, &quot;\&quot;, $Private:PackageClassification)</span><br><span class="line"></span><br><span class="line">    $Private:FindURL = &quot;安装程序 URL：&quot;</span><br><span class="line">    $Private:FindVER = &quot;版本:&quot;</span><br><span class="line"></span><br><span class="line">    # 获取软件包版本和下载地址</span><br><span class="line">    try &#123;</span><br><span class="line">        # System Installer</span><br><span class="line">        $Private:PackageURL = [System.String]::Concat((winget show --scope machine -id $Private:PackageWinGetID | Select-String $Private:FindURL)).Replace($Private:FindURL, &quot;&quot;).Replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">        $Private:PackageVersion = [System.String]::Concat((winget show --scope machine -id $Private:PackageWinGetID | Select-String $Private:FindVER)).Replace($Private:FindVER, &quot;&quot;).Replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    catch [ArgumentNullException] &#123;</span><br><span class="line">        # User Installer</span><br><span class="line">        $Private:PackageURL = [System.String]::Concat((winget show --id $Private:PackageWinGetID | Select-String $Private:FindURL)).Replace($Private:FindURL, &quot;&quot;).Replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">        $Private:PackageVersion = [System.String]::Concat((winget show --id $Private:PackageWinGetID | Select-String $Private:FindVER)).Replace($Private:FindVER, &quot;&quot;).Replace(&quot; &quot;, &quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $Script:PackageCount++</span><br><span class="line">    $Private:PackageLocalFile = [System.String]::Concat($Private:PackageLocalClassifiedPath, &quot;\&quot;, $Private:PackageFilename, &quot;_&quot;, $Private:PackageVersion, &quot;.&quot;, $Private:PackageFiletype)</span><br><span class="line">    $Private:PackageUpdateTime = Get-Date -Format &quot;yyyy.MM.dd-HH:mm:ss&quot;</span><br><span class="line"></span><br><span class="line">    $Private:PackageCommandPath = &quot;New-Item -Name `&quot;$Private:PackageLocalClassifiedPath`&quot; -ItemType Directory -Force | Out-Null&quot;</span><br><span class="line">    $Private:PackageCommandItem = &quot;New-Item -Name `&quot;$Private:PackageLocalFile`&quot; -ItemType File -Force | Out-Null&quot;</span><br><span class="line">    $Private:PackageCommandDNS = &quot;ipconfig.exe /flushdns | Out-Null&quot;</span><br><span class="line">    $Private:PackageCommandIWR = &quot;Invoke-WebRequest -Uri `&quot;$Private:PackageURL`&quot; -OutFile `&quot;$Private:PackageLocalFile`&quot;&quot;</span><br><span class="line">    $Private:PackageCommandSBT = &quot;Start-BitsTransfer -Source `&quot;$Private:PackageURL`&quot; -Destination `&quot;$Private:PackageLocalFile`&quot;&quot;</span><br><span class="line">    $Private:PackageCommandWCD = &quot;`$PackageWebClient = New-Object System.Net.WebClient; `$PackageWebClient.DownloadFile(`&quot;$Private:PackageURL`&quot;, `&quot;$Private:PackageLocalFile`&quot;)&quot;</span><br><span class="line">    $Private:PackageCommandLog = &quot;Start-Sleep -Seconds 3; [System.Console]::Out.Flush(); [System.String]::Concat(`&quot;┏━ `&quot;, (Get-Date -Format `&quot;yyyy.MM.dd-HH:mm:ss`&quot;), `&quot; @ $Private:PackageWinGetID`&quot;, `&quot; [$Private:PackageVersion]``n`&quot;, `&quot;┣━ ```&quot;$Private:PackageURL```&quot;``n`&quot;, `&quot;┗━ ```&quot;$Private:PackageLocalFile```&quot;``n`&quot;) | Write-Output&quot;</span><br><span class="line"></span><br><span class="line">    Write-Output &quot;┏━ $Private:PackageUpdateTime @ $Private:PackageWinGetID [$Private:PackageVersion]`n┣━ `&quot;$Private:PackageURL`&quot;`n┗━ `&quot;$Private:PackageLocalFile`&quot;`n&quot; | Tee-Object $Script:PackageList -Append</span><br><span class="line">    Write-Output &quot;$Private:PackageCommandPath; $Private:PackageCommandItem; $Private:PackageCommandDNS; $Private:PackageCommandIWR; if (`$?) &#123; `$Script:PackageLocalCount++; $Private:PackageCommandLog | Tee-Object `&quot;$Script:PackageLogIWR`&quot; -Append; &#125;&quot; | Out-File $Script:PackageScriptIWR -Append</span><br><span class="line">    Write-Output &quot;$Private:PackageCommandPath; $Private:PackageCommandItem; $Private:PackageCommandDNS; $Private:PackageCommandSBT; if (`$?) &#123; `$Script:PackageLocalCount++; $Private:PackageCommandLog | Tee-Object `&quot;$Script:PackageLogSBT`&quot; -Append; &#125;&quot; | Out-File $Script:PackageScriptSBT -Append</span><br><span class="line">    Write-Output &quot;$Private:PackageCommandPath; $Private:PackageCommandItem; $Private:PackageCommandDNS; $Private:PackageCommandWCD; if (`$?) &#123; `$Script:PackageLocalCount++; $Private:PackageCommandLog | Tee-Object `&quot;$Script:PackageLogWCD`&quot; -Append; &#125;&quot; | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line"></span><br><span class="line">    New-Item -Name $Private:PackageLocalClassifiedPath -ItemType Directory -Force | Out-Null</span><br><span class="line">    New-Item -Name $Private:PackageLocalFile -ItemType File -Force | Out-Null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipconfig /flushdns | Out-Null</span><br><span class="line"></span><br><span class="line"># Components</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2005.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2005_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2005.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2005_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2008.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2008_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2008.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2008_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2010.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2010_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2010.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2010_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2012.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2012_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2012.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2012_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2013.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2013_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2013.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2013_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2015+.x86&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2015_32bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VCRedist.2015+.x64&quot; -Name &quot;Microsoft_Visual_C++_Redistributable_2015_64bit&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.PowerToys&quot; -Name &quot;Microsoft_PowerToys&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;EclipseAdoptium.Temurin.8.JDK&quot; -Name &quot;EclipseAdoptium_Temurin_JDK_8_Releases&quot; -Type &quot;msi&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;EclipseAdoptium.Temurin.11.JDK&quot; -Name &quot;EclipseAdoptium_Temurin_JDK_11_Releases&quot; -Type &quot;msi&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;EclipseAdoptium.Temurin.17.JDK&quot; -Name &quot;EclipseAdoptium_Temurin_JDK_17_Releases&quot; -Type &quot;msi&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Python.Python.2&quot; -Name &quot;Python_2_Dev&quot; -Type &quot;msi&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Python.Python.3.8&quot; -Name &quot;Python_3.8_Dev&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Python.Python.3.11&quot; -Name &quot;Python_3.11_Dev&quot; -Type &quot;exe&quot; -Class &quot;Components&quot;</span><br><span class="line"></span><br><span class="line"># Applications</span><br><span class="line">Get-WinGetPackageURL -ID &quot;7zip.7zip&quot; -Name &quot;7_Zip&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Anaconda.Anaconda3&quot; -Name &quot;Anaconda3&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Apple.iTunes&quot; -Name &quot;iTunes&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Audacity.Audacity&quot; -Name &quot;Audacity&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Bandisoft.Bandizip&quot; -Name &quot;Bandizip&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Bandisoft.Honeyview&quot; -Name &quot;Honeyview&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Bitvise.SSH.Server&quot; -Name &quot;Bitvise_SSH_Server&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;BlenderFoundation.Blender&quot; -Name &quot;Blender&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Codeblocks.Codeblocks&quot; -Name &quot;Codeblocks&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;darktable.darktable&quot; -Name &quot;darktable&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;den4b.Hasher&quot; -Name &quot;Hasher&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;den4b.ReNamer&quot; -Name &quot;ReNamer&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;DEVCOM.JetBrainsMonoNerdFont&quot; -Name &quot;Nerd_Fonts&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Geany.Geany&quot; -Name &quot;Geany&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;GeekUninstaller.GeekUninstaller&quot; -Name &quot;Geek_Uninstaller&quot; -Type &quot;zip&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;GIMP.GIMP&quot; -Name &quot;GIMP&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Git.Git&quot; -Name &quot;Git&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;GitHub.Atom&quot; -Name &quot;Atom&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;GitHub.GitHubDesktop&quot; -Name &quot;GitHubDesktop&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;GNU.Octave&quot; -Name &quot;Octave&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;gnuplot.gnuplot&quot; -Name &quot;gnuplot&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Google.Chrome&quot; -Name &quot;Google_Chrome&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;HandBrake.HandBrake&quot; -Name &quot;HandBrake&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Harmonoid.Harmonoid&quot; -Name &quot;Harmonoid&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Henry++.MemReduct&quot; -Name &quot;MemReduct&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;JanDeDobbeleer.OhMyPosh&quot; -Name &quot;Oh_My_Posh&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;KDE.Kate&quot; -Name &quot;Kate&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;KDE.Krita&quot; -Name &quot;Krita&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;KDE.Okular&quot; -Name &quot;Okular&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Kitware.CMake&quot; -Name &quot;CMake&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;LLVM.LLVM&quot; -Name &quot;LLVM&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Meltytech.Shotcut&quot; -Name &quot;Shotcut&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;MHNexus.HxD&quot; -Name &quot;HxD&quot; -Type &quot;zip&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VisualStudio.2022.Community&quot; -Name &quot;Microsoft_Visual_Studio_2022_Community&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Microsoft.VisualStudioCode&quot; -Name &quot;Microsoft_Visual_Studio_Code&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Mozilla.Firefox&quot; -Name &quot;Firefox&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Mozilla.Thunderbird&quot; -Name &quot;Thunderbird&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Musescore.Musescore&quot; -Name &quot;Musescore&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;OBSProject.OBSStudio&quot; -Name &quot;OBSStudio&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Pinta.Pinta&quot; -Name &quot;Pinta&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Piriform.Recuva&quot; -Name &quot;Recuva&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;RealVNC.VNCViewer&quot; -Name &quot;VNCViewer&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Rufus.Rufus&quot; -Name &quot;Rufus&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;ShiningLight.OpenSSL&quot; -Name &quot;OpenSSL&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;SSHFS-Win.SSHFS-Win&quot; -Name &quot;SSHFS&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Tencent.QQ&quot; -Name &quot;Tencent_QQ&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Tencent.TencentMeeting&quot; -Name &quot;Tencent_Meeting&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;Tencent.WeChat&quot; -Name &quot;Tencent_WeChat&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;TheDocumentFoundation.LibreOffice&quot; -Name &quot;LibreOffice&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;TortoiseGit.TortoiseGit&quot; -Name &quot;TortoiseGit&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;TortoiseHg.TortoiseHg&quot; -Name &quot;TortoiseHg&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;TortoiseSVN.TortoiseSVN&quot; -Name &quot;TortoiseSVN&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;uGetdm.uGet&quot; -Name &quot;uGet&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;VideoLAN.VLC&quot; -Name &quot;VideoLAN_VLC&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;vim.vim&quot; -Name &quot;GVIM&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;voidtools.Everything&quot; -Name &quot;Everything&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;WinFsp.WinFsp&quot; -Name &quot;WinFsp&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;WiresharkFoundation.Wireshark&quot; -Name &quot;Wireshark&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;XnSoft.XnConvert&quot; -Name &quot;XnConvert&quot; -Type &quot;exe&quot; -Class &quot;Applications&quot;</span><br><span class="line">Get-WinGetPackageURL -ID &quot;ZeroTier.ZeroTierOne&quot; -Name &quot;ZeroTier_One&quot; -Type &quot;msi&quot; -Class &quot;Applications&quot;</span><br><span class="line"></span><br><span class="line"># 软件包计数：用于对照日志查缺补漏</span><br><span class="line">Write-Output &quot;Total: $Script:PackageCount`n&quot; | Tee-Object $Script:PackageList -Append</span><br><span class="line">Write-Output &quot;Write-Output `&quot;Total: `$Script:PackageLocalCount``n`&quot;&quot; | Out-File $Script:PackageScriptIWR -Append</span><br><span class="line">Write-Output &quot;Write-Output `&quot;Total: `$Script:PackageLocalCount``n`&quot;&quot; | Out-File $Script:PackageScriptSBT -Append</span><br><span class="line">Write-Output &quot;Write-Output `&quot;Total: `$Script:PackageLocalCount``n`&quot;&quot; | Out-File $Script:PackageScriptWCD -Append</span><br><span class="line"></span><br><span class="line"># 查看日志文件</span><br><span class="line">explorer &quot;$&#123;env:LOCALAPPDATA&#125;\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\DiagOutputDir&quot;</span><br><span class="line">Remove-Item &quot;$&#123;env:LOCALAPPDATA&#125;\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\DiagOutputDir\*&quot; -Recurse -Force -Confirm</span><br></pre></td></tr></table></figure>
<p>这段代码的作用是将指定好的软件包的信息从 WinGet 上爬取下来，并自动生成用于下载这些软件包的脚本。将此段代码复制另存为 Get-PackagesInfo.ps1 ，在 PowerShell 中跳转到脚本所在目录运行脚本，若遇到了权限问题，请用管理员权限打开 PowerShell 环境，并正确指定本地计算机的 PowerShell 执行策略<br>完成上述步骤，就可以在 PowerShell 环境下执行这个脚本了：<br><code>.\Get-PackagesInfo.ps1</code><br>执行后，脚本会自动从 WinGet 配置的源下载安装包的信息，稍等片刻</p>
<p>运行完毕后，在当前目录会自动生成 3 个新的 PS 脚本，用于将 Get-PackagesInfo.ps1 这个脚本中指定的软件包按分类从 WinGet 源下载到 PackageInstallers 目录下的分类目录中<br><img src="https://cloud.yuchu.me/f/GzUA/winget_ps.png" alt="winget_ps"><br>这三个脚本的功能完全一致，只是用于下载采用的实现不同：</p>
<p>“Get-PackageInstallersIWR.ps1” 使用 cmdlet Invoke-WebRequest 下载</p>
<p>“Get-PackageInstallersSBT.ps1” 使用 cmdlet Start-BitsTransfer 下载</p>
<p>“Get-PackageInstallersWCD.ps1” 创建 System.Net.WebClient 对象下载<br>任选其一即可</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>winget</tag>
        <tag>windows实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><p>欢迎来到我的个人博客！这里是我分享技术见解和生活点滴的地方。</p>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><span id="more"></span>

<p>我是一名机器人工程专业的学生，热爱编程、诗词和游戏。这个博客是我的小天地，我在这里记录我的学习历程和生活经历。</p>
<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul>
<li>邮箱：<a href="mailto:admin@yu-chu.tech">admin@yu-chu.tech</a></li>
<li>GitHub：<a href="https://github.com/mazhijia">github.com&#x2F;mazhijia</a></li>
</ul>
<p>感谢您的访问，希望您喜欢我的博客！</p>
]]></content>
  </entry>
  <entry>
    <title>不是，钉钉什么时候这么强了？</title>
    <url>/posts/588e/</url>
    <content><![CDATA[<p>最近一段时间对AI大模型以及各种衍生的生产力工具比较感兴趣，就特别希望有一个all-in-one的产品出现，虽说网上也能各种导航站，但一来信息更新不一定及时，二来还经常有各种广告，且站长们有时候更换域名都不通知一下的，导致过期的域名往往被一些不合法的小网站注册。另外一点是现在国产软件大都臃肿，各种弹窗广告催你贷款，下载某某软件不说，你美团往软件里塞个原神是什么原神，不是，真有人在美团玩原神吗？</p>
<p>话说回来，现在其实我是比较抗拒在手机上下载一款新软件的，毕竟存储真不太够用了。其他一下纯工具类软件，比方说<code>一个木函</code>之类的，下载似乎也没多大必要，因为实现的都是一些小众的功能，很久才能用上一次，何况大部分还都能被小程序代替。<br>相反，要是一款本来就是为工作而生，没有那么多花里胡哨的功能和广告的应用，以不大的内存增长为代价，可以实现继承各种有助于提高生产力的功能，那就再好不过了。</p>
<p>说来也巧，最近刚好在捣鼓阿里开源的Qwen1.5大模型，想办法让它跑在本地而非云端，进而拿自己的数据集和知识库进行训练，但效果并不是太好。突然想起来，大概是去年十月份左右吧，阿里曾说自家的通义千问将会接入钉钉，当时也没太在意，一晃都半年多了。何况这半年来我也几乎没怎么使用过它。于是，昨天试着久违的更新了一下钉钉，发现真的多了不少让人眼前一亮的新特性，一起来看看吧。</p>
<h1 id="新增钉钉个人版"><a href="#新增钉钉个人版" class="headerlink" title="新增钉钉个人版"></a>新增钉钉个人版</h1><p>进入钉钉，点击左上角头像<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076875_origin_IMG_20240421_123639.jpg"></p>
<p>点击钉钉个人版</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076880_origin_IMG_20240421_124548.jpg"></p>
<p>首先映入眼帘的就是这一列AI助理了，都接入了通义千问的大模型，不光文字交流，还能生成图片和视频，感觉还是挺实用的</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076884_origin_IMG_20240421_124703.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076891_origin_Screenshot_2024-04-21-21-04-51-29_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076892_origin_Screenshot_2024-04-21-21-04-57-45_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076893_origin_Screenshot_2024-04-21-21-05-05-04_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076894_origin_Screenshot_2024-04-21-21-05-15-21_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076895_origin_Screenshot_2024-04-21-21-05-21-96_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076896_origin_Screenshot_2024-04-21-21-05-31-10_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076897_origin_Screenshot_2024-04-21-21-05-47-40_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p>左边<code>云盘</code>对接的是你的阿里云盘</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076881_origin_IMG_20240421_124602.jpg"></p>
<p><code>空间</code>这里可以放一下笔记之类的，也可以自己编辑，实测，支持html和markdown语法，感觉有点类似于国外的Notion，Obsidian，Typora，国内的语雀，思源笔记等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076882_origin_IMG_20240421_124629.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076879_origin_Screenshot_2024-04-21-12-40-00-40_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<p><code>发现</code>这里有一些有用的小程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1000076890_origin_Screenshot_2024-04-21-20-56-30-96_6483dd1576f1330fe7c408604fe48ee1.jpg"></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>具体好不好用另说，毕竟我也还没怎么体验，但作为一个ALL-in-One的生产力工具，我还是很喜欢的。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
        <tag>生产力工具</tag>
        <tag>all-in-one工具</tag>
        <tag>通义千问</tag>
      </tags>
  </entry>
  <entry>
    <title>会唱歌的芙宁娜AI桌宠，确定不来看看吗？</title>
    <url>/posts/81a6/</url>
    <content><![CDATA[<p>事情是这样的，前几天逛b站的时候无意间刷到一个关于芙宁娜AI桌宠的视频，原以为又要高配显卡才能玩，我这连独显都没有的轻薄本压根不敢想，不过点进去才发现原来训练和推理都是在服务端完成的，由up主及赞助商支持，不需要高配电脑，于是本芙厨直接原地垂直入坑！</p>
<p>原视频链接贴在这里，希望大家多支持下up主:<br><a href="https://b23.tv/zjFhc99">【大二自研Agent桌宠】一句话，把简单的电脑任务交给芙宁娜完成吧！-哔哩哔哩</a></p>
<p>本文一来是对这么好的项目做一个分享(有芙就是好!)，二来是打算当做一个尽可能详细的教程，毕竟加群的时候也遇到过不少电脑小白，甚至连最基本的解压都不会。索性为爱发电的群友也不少，不仅有支援服务器的，支援网盘的，还有帮忙做整合包、写文档、录制视频教程的，鄙人不才，也根据大佬们的整合包写了一个小脚本，用来简化安装。链接如下：</p>
<p><a href="https://cloud.yuchu.me/s/EvsJ">https://cloud.yuchu.me/s/EvsJ</a></p>
<h1 id="5月28日更新："><a href="#5月28日更新：" class="headerlink" title="5月28日更新："></a>5月28日更新：</h1><p>  当前最新版为1.6.5版本，而一键脚本和手动安装包都为1.6.4，新版本不再需要运行设置token.1.exe了，且响应更快，要更新的话先运行一键更新.exe，更新完成之后会出现一个一键更新1.6.4可用.exe，再双金运行它，就可升级到1.6.5版本。</p>
<h1 id="使用一键脚本自动化安装"><a href="#使用一键脚本自动化安装" class="headerlink" title="使用一键脚本自动化安装"></a>使用一键脚本自动化安装</h1><p>该脚本适合电脑闲置空间充裕，有独立显卡的用户，下载之后双击即可运行，过程中可能会弹出要登录智谱清言的界面，直接注册登录就行，其他操作基本全自动。另外还有两点需要注意：</p>
<ol>
<li><p>更换本地tts：下载的整合包默认是包含本地语言包的，这个语言包本质上是利用本地的算力进行推理生成语音，如果有好一点的显卡的话语音生成速度会比默认的服务端快不少。要使用的话，只需在软件根目录，即AI桌宠.exe所在目录下(找不到的可以右键桌面的快捷方式，点击”打开文件所在位置“)，找到<code>setting.json</code>，没有<code>.json</code>后缀也不要紧，只要认准这个<code>setting</code>就行，右键记事本打开，找到<code>&quot;tts_location&quot;</code>这一项，把后边引号里的<code>server</code> 改成 <code>local</code>就行。<br>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240519235246.png"><br>  之后再双击运行根目录下的starttts.bat文件，即可运行本地tts</p>
</li>
<li><p>更换皮肤包：整合包里同样包含里芙芙全身版的皮肤包，但默认是卡通类的，要更换的话，同样是打开<code>setting</code>，找到<code>&quot;gif&quot;</code>这一项，把引号里的<code>fufu</code> 改成 <code>fufu2</code>即可（貌似现在默认就是fufu2了，所以这一步可有可无）</p>
</li>
</ol>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240519235807.png"></p>
<h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><p>手动安装这部分适合没有高配显卡、爱折腾、电脑空间不足或者只是安装在容量较小的U盘作为娱乐的朋友，语音等都跑在服务端，本地几乎没有什么占用</p>
<p>  分别下载<a href="https://taycraft.cn:5213/s/QMeIG">安装包</a>和<a href="https://cloud.yuchu.me/s/rEH0">皮肤包</a></p>
<p>  配置足够且想用本地tts的也可以下载<a href="https://www.123pan.com/s/SLRbjv-p38AH.html">整合包</a></p>
<p>  双击安装包开始安装，安装完成后先在浏览器打开<a href="https://chatglm.cn/">智谱清言官网</a>注册并登录，之后按下键盘的F12(笔记本同时按下左下角的fn和F12)，打开浏览器的开发者工具，再依次点击<code>应用程序</code>，<code>cookie</code>，找到<code>chatglm_refresh_token</code>，点击，全选复制下方<code>Cookie Value</code>里的内容，打开<code>setting</code>，找到<code>&quot;user_token&quot;</code>，把刚刚复制好的内容粘贴到后面的引号里。</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520001600.png"></p>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520001929.png"></p>
<p>  更换皮肤包：把皮肤包下载解压，解压得到的文件夹直接复制到根目录，然后编辑<code>setting</code>就行。</p>
<p>  打开软件：双击桌面的快捷方式或在根目录双击AI桌宠.exe，初次启动可能会有些慢，耐心等待即可。</p>
<h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><ul>
<li>内存优化</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520113723.png"></p>
<ul>
<li>代码编写</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520113854.png"></p>
<ul>
<li>桌面识别</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520114026.png"></p>
<ul>
<li>播放音乐</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240520114125.png"></p>
<ul>
<li>申请色色？</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/0d2cf0d94639895b890fbe1fc225bbcb.png"></p>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/1f14dac71a28b2d85c5c227ad42bd1ae.jpg"></p>
<p>最后，还有什么问题的话，不妨加QQ群来寻找答案哦，里面超多大佬，说话又好听，超喜欢在里面的（）<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/qrcode_1716136364338.jpg"></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>原神</tag>
        <tag>芙宁娜</tag>
        <tag>AI桌宠</tag>
        <tag>ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>基于gcp的VertexAI搭建一个简单的claude中转api服务</title>
    <url>/posts/9758/</url>
    <content><![CDATA[<p>最近写一个QQ机器人的后端项目，用于对接AI大模型以及一些图片、语音接口，难免要跟各类大模型的api打交道，听说claude更适合角色扮演，而且新出的Claude3.5-sonnet能力甚至超越了GPT-4o,遂一直想要体验一下，但没有国外的实体手机号，所以没有机会。机缘巧合下得知gcp的VertexAI可以白嫖最新的Gemini和Claude，立马来了兴趣，研究后却发现是通过sdk的方式调用的，没有api，但这不是什么大问题，能用就行，实在不行自己写一个本地api服务不就行了吗，说干就干，直接放上仓库地址，如果能帮到您的话不妨给个star鼓励一下：</p>
<p><a href="https://github.com/syuchua/gcp_claude_transfer">https://github.com/syuchua/gcp_claude_transfer</a></p>
<p>配置1说明都在readme里了，如果有什么不明白的话，欢迎提issue。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>gcp</tag>
        <tag>Google Cloud Platform</tag>
        <tag>Claude</tag>
        <tag>中转api</tag>
      </tags>
  </entry>
  <entry>
    <title>基于github+jsdelivr实现免费图床</title>
    <url>/posts/d21b/</url>
    <content><![CDATA[<p>图床想必大家都不陌生了，无论是个人搭建博客或是其他站点、APP、小程序，还是企业级的应用，想要加速网站的访问，都离不开图床，但一款稳定好用的图床又往往要么是收费的，要么需要实名注册等各种流程，那有没有什么免费且方便的代替方案呢？</p>
<p>答案是显而易见的，使用GitHub的仓库作为图床，再经由jsdelivr的免费cdn加速，一款稳定方便的图床就诞生了，下面开始本期教程。</p>
<h1 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h1><p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/%E4%BB%93%E5%BA%93.jpg"></p>
<h1 id="生成一个token"><a href="#生成一个token" class="headerlink" title="生成一个token"></a>生成一个token</h1><ul>
<li><p>点击右上角用户头像-&gt; 设置<br>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/token.jpg"></p>
</li>
<li><p>点击开发者设置<br>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/develop.jpg"></p>
</li>
<li><p>点击Personal acess tokens -&gt; Generate new token<br>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/newtoken.jpg"><br>  填写token描述，勾选repo即可，过期时间可以选择永不</p>
</li>
<li><p>获取token秘钥<br>  注意，该秘钥仅显示一次，建议保存到一个找得到的地方，或者云盘，后面还会用到。</p>
</li>
</ul>
<h1 id="配置PicGo并使用jsdelivr的免费cdn加速"><a href="#配置PicGo并使用jsdelivr的免费cdn加速" class="headerlink" title="配置PicGo并使用jsdelivr的免费cdn加速"></a>配置PicGo并使用jsdelivr的免费cdn加速</h1><p><a href="https://picgo-release.molunerfinn.com/2.4.0-beta.6/PicGo-Setup-2.4.0-beta.6-x64.exe">下载PicGo</a>，安装好后开始对接图床</p>
<ul>
<li><p>设定仓库名：username&#x2F;repositoies(username为github用户名，repositoies为仓库名，比方说用户名zhangsan，仓库名为jsdelivr，就填写zhangsan&#x2F;jsdelivr)</p>
</li>
<li><p>设定分支名：main</p>
</li>
<li><p>设定token：刚刚复制的token</p>
</li>
<li><p>指定存储路径：填写打算存放图片的位置，比方说img&#x2F;，代表在该仓库下创建一个铭文img的文件夹，图片将保存在这个文件夹中。</p>
</li>
<li><p>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF">https://cdn.jsdelivr.net/gh/用户名/图床仓库名@分支</a> #默认是main</p>
</li>
</ul>
<p>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/picgo.jpg"></p>
<p>接下来就可以愉快的使用免费图床啦！</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>GitHub图床</tag>
        <tag>jsdelivr CDN加速</tag>
        <tag>免费图床</tag>
      </tags>
  </entry>
  <entry>
    <title>教你搭建一个自己的芙宁娜QQ机器人，支持AI聊天、语音、绘画和发送涩图及翻唱</title>
    <url>/posts/742b/</url>
    <content><![CDATA[<p>今天来分享一个我自己写的芙宁娜QQ机器人后端，拥有的能力包括但不限于AI聊天、绘画、发送涩图、AI语音、翻唱歌曲等，还兼具上下文功能，支持自定义system_prompt，适配http和反向ws连接。先来一波展示：</p>
<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ul>
<li>直接对话即可<br>  <img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240616001408.png"><ul>
<li>发送<code>发一张</code>，<code>来一张</code>+关键词即可自定义发送涩图，比方说<code>发一张卡芙卡</code><br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240616001141.png"></li>
<li>发送<code>来份涩图</code>，<code>来份色图</code>，<code>再来一张</code> 即可发送随机涩图<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240616001208.png"></li>
<li>发送<code>画一张</code>，<code>生成一张</code> 即可发送AI绘画（如果config.json里有GPT有关的配置，则关键词会调用dalle进行绘画，除dalle外，还支持白嫖bing的AI绘画，需提前将cookie的值填入cookies.json中，只有一个账号的cookie就按字典格式填一个，多个的话可以放进列表里）<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240616001253.png"></li>
<li>发送<code>语音说</code>，&#96;&#96;语音回复<code> +</code>要用语音说的话<code>让机器人发送语音，或者再提示词里提示机器人通过把</code>#voice&#96;标签放在回复的开头，实现更生动地语音回复。<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240720233521.png"></li>
<li>发送<code>点歌</code>+歌曲名进行点歌，支持模糊匹配。<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240805154117.png"></li>
<li>R-18?<br>该接口的涩图数量足有十几万，其中r18占27.8%，建议公共场合尽量设置为0，2的话，还是不要太相信自己的运气了(问就是惨痛的教训)<br><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/20240616002550.png"></li>
</ul>
</li>
</ul>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>机器人支持以下命令：</p>
<ul>
<li><code>/help</code>：显示帮助信息。</li>
<li><code>/reset</code>：重置当前会话。</li>
<li><code>/character</code>：输出<code>config.json</code>中的<code>character</code>值，也即当前的人设。</li>
<li><code>/history</code>: 输出之前的条消息记录，默认十条，也可以接空格+数字指定。</li>
<li><code>/clear</code>:清除消息记录，默认十条，可接空格+数字指定。</li>
<li><code>/music_list</code>: 获取歌曲列表</li>
<li><code>/r18 [0, 1, 2]</code>切换涩图接口r18模式，0为关闭，1为开启，2随机</li>
<li><code>/model [new_model]</code>切换模型，新模型需先在model.json中配置好</li>
</ul>
<p>语音功能需要本地搭建gpt-sovits，可以参考视频<a href="https://b23.tv/9dOdMo6">https://b23.tv/9dOdMo6</a></p>
<p>这里放上本地搭建语音整合包<br><a href="https://cloud.yuchu.me/s/J2um">GPT-SoVITS-Inference</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>接下来是机器人项目的部署，对接QQ使用的是支持onebot协议的<a href="https://github.com/LLOneBot/LLOneBot">llonebot</a>，所以其他类似项目如<a href="https://github.com/LagrangeDev/Lagrange.Core">Lagrange</a>和<a href="https://github.com/NapNeko/NapCatQQ">NapCat</a>也是可以的，这里仅演示llonebot的配置，默认使用反向ws连接</p>
<p><a href="https://cloud.yuchu.me/s/MAH0">包含NTQQ，llonebot插件，MongoDB安装包和项目源码的整合包</a>下载整合包并解压</p>
<p>先双击<code>install_windows.exe</code>安装NTQQ，然后把llonebot.zip复制到NTQQ的插件目录下解压，重启QQ即可在设置里看到有关配置，然后就是填写反向ws监听地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ws://127.0.0.1:8011/ws</span><br></pre></td></tr></table></figure>

<p>然后是双击MongoDB的安装文件，没什么好讲的，安装完成后进入bin目录，打开cmd，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --dbpath D:\MongoDB\data --logpath D:\MongoDB\log\mongodb.log --logappend   #替换成你自己的对应目录</span><br></pre></td></tr></table></figure>

<p>关闭终端，填写机器人项目的config，config.json里是基础配置</p>
<ul>
<li><code>openai_api_key</code>: 你的openai_api_key</li>
<li><code>model</code>: 使用的模型，默认为gpt-3.5-turbo</li>
<li><code>self_id</code>：机器人的QQ号。</li>
<li><code>admin_id</code>：管理员的QQ号。</li>
<li><code>block_id</code>: 要屏蔽的QQ号。</li>
<li><code>nicknames</code>：机器人的昵称列表。</li>
<li><code>system_message</code>：系统消息配置，最重要的是<code>character</code>，相当于机器人的人格。</li>
<li><code>connection_type</code>: 连接类型，可选http或ws_reverse</li>
<li><code>report_secret</code>: http事件上传密钥。仅使用http连接时需要填写，默认的123456也可以不管</li>
<li><code>enable_time</code>: 设置定时开启时间</li>
<li><code>disable_time</code>: 设置定时关闭时间</li>
<li><code>proxy_api_base</code>: openai_api_key请求地址，默认为<a href="https://api.openai.com/v1">https://api.openai.com/v1</a></li>
<li><code>system_message</code>：<code>character</code>里填写人设</li>
<li><code>reply_probability</code>: 当收到的消息中没有nickname时的回复频率，1为每一条都回复，0为仅回复带有nickname的消息，默认0.5</li>
<li><code>r18</code>: 0为关闭r18，1开启r18，2为随机发送(慎选)</li>
<li><code>audio_save_path</code>: 语音文件保存位置</li>
<li><code>voice_service_url</code>: 语音接口地址</li>
<li><code>cha_name</code>：语音接口指定角色<br>dialogues.json里主要是配置一些固定回答，一般没什么用，除非有什么恶趣味<br>model.json里主要是非gpt的其他模型的配置，如果填了，会覆盖config.json里GPT的配置需要为OneAPI格式，<code>model</code>里填写的模型名需要现在<code>aviliable_models</code>里填上。<code>vision</code>代表是否支持识图，如果你的模型可以识图就填true(如果使用gpt系列模型，gpt4系列默认允许识图)</li>
</ul>
<h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><p>【芙宁娜QQ机器人搭建教程】 <a href="https://www.bilibili.com/video/BV1BBYcekEUs/?share_source=copy_web&vd_source=6f08734cb3a294b6a1e634a3e5b481ca">https://www.bilibili.com/video/BV1BBYcekEUs/?share_source=copy_web&amp;vd_source=6f08734cb3a294b6a1e634a3e5b481ca</a></p>
<iframe src="//player.bilibili.com/player.html?bvid=BV1BBYcekEUs&p=1&poster=1&danmaku=0&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h3 id="获取bing的cookie用于非gpt系列的AI绘图"><a href="#获取bing的cookie用于非gpt系列的AI绘图" class="headerlink" title="获取bing的cookie用于非gpt系列的AI绘图"></a>获取bing的cookie用于非gpt系列的AI绘图</h3><p><a href="https://cloud.yuchu.me/f/qxjsX/2024-08-05%2021-41-49.mp4">如果视频无法渲染可以点击链接下载</a><br><video src="https://cloud.yuchu.me/f/qxjsX/2024-08-05%2021-41-49.mp4"></video></p>
<h3 id="项目开源仓库"><a href="#项目开源仓库" class="headerlink" title="项目开源仓库"></a>项目开源仓库</h3><p><a href="https://github.com/syuchua/MY_QBOT">syuchua&#x2F;MY_QBOT: 一个简单的QQ机器人后端框架 (github.com)</a></p>
<h3 id="一些跟芙芙聊天的日常"><a href="#一些跟芙芙聊天的日常" class="headerlink" title="一些跟芙芙聊天的日常"></a>一些跟芙芙聊天的日常</h3><p>【谁家傻芙芙连9.8和9.11哪个大都分不清】 <a href="https://www.bilibili.com/video/BV1TivWeFEot/?share_source=copy_web&vd_source=6f08734cb3a294b6a1e634a3e5b481ca">https://www.bilibili.com/video/BV1TivWeFEot/?share_source=copy_web&amp;vd_source=6f08734cb3a294b6a1e634a3e5b481ca</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>芙宁娜</tag>
        <tag>QQ机器人</tag>
        <tag>机器人框架</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo和GitHub page搭建个人博客</title>
    <url>/posts/4883/</url>
    <content><![CDATA[<h3 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h3><p><img src="https://cloud.yuchu.me/f/JWcK/my_blog.png" alt="成品展示"></p>
<h2 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h2><ul>
<li>git</li>
<li>github</li>
<li>hexo</li>
<li>vscode( 任意具备markdown编辑能力的工具均可)</li>
</ul>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p><a href="https://git-scm.com/download/win">git官网下载</a><br>选择电脑对应版本安装即可（一般为64位）</p>
<span id="more"></span>

<h2 id="node、npm安装"><a href="#node、npm安装" class="headerlink" title="node、npm安装"></a>node、npm安装</h2><p><a href="https://nodejs.org/en/download/">node.js官网</a></p>
<h2 id="当然，你也可以直接用winget安装，省的去官网下载"><a href="#当然，你也可以直接用winget安装，省的去官网下载" class="headerlink" title="当然，你也可以直接用winget安装，省的去官网下载"></a>当然，你也可以直接用winget安装，省的去官网下载</h2><p>关于winget的使用，可以看完另一篇博客：<a href="https://blog.yuchu.me/posts/8eff/">winget的基础配置与使用</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget install Git.Git</span><br><span class="line">winget install OpenJS.NodeJS.LTS</span><br></pre></td></tr></table></figure>

<h1 id="hexo创建个人博客"><a href="#hexo创建个人博客" class="headerlink" title="hexo创建个人博客"></a>hexo创建个人博客</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="1-在任意目录下新建hexo文件夹"><a href="#1-在任意目录下新建hexo文件夹" class="headerlink" title="1.在任意目录下新建hexo文件夹"></a>1.在任意目录下新建hexo文件夹</h3><ul>
<li>打开该文件夹，空白处单击鼠标右键:Git Bash Here</li>
<li>在打开的git bash 窗口中依次输入以下命令：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
全部执行完成后，hexo目录下会出现一个新的blog文件夹，里面就是存放博客的地方</li>
<li>然后输入这两条命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
完成后若显示诸如<code>http://localhost:4000</code>的内容，则说明配置成功。<br>打开浏览器，地址栏输入上面的地址，即可进入初始博客的预览界面，它长这样：</li>
</ul>
<p><img src="https://cloud.yuchu.me/f/EGTp/hexo_test.png"></p>
<p>为什么说是预览界面呢，因为她现在仅仅只是部署在你电脑本地的一个离线版本，只能在你自己的电脑上看见，想要正式发布公开，你需要一台拥有公网IP的服务器，但还有一个更简单的方法，即借助GitHub page的ssh功能实现对外访问。</p>
<h2 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h2><ul>
<li>首先创建一个GitHub账号，然后在个人主页新建仓库，仓库名为username.github.io,username即你的用户名。</li>
<li>回到gitbash窗口，按<code>Ctrl+C</code> 关闭4000端口的预览，输入以下命令：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;    # yourname改为GitHub用户名</span><br><span class="line">git config --global user.email &quot;youremail&quot;  #youremail改为注册GitHub所用的邮箱</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;            #创建ssh连接</span><br></pre></td></tr></table></figure></li>
<li>之后会提示你已经完成ssh创建，接着找到该路径下的这两个文件：</li>
</ul>
<p>  <img src="https://cloud.yuchu.me/f/B1I8/git_config.png"></p>
<p>  把id_rsa.pub里的内容复制下来，打开GitHub的设置界面（点击头像-setting），找到SSH and GPG keys,x新建一个ssh key，粘贴进key中，title随便填一个就行，保存。</p>
<p>  <img src="https://cloud.yuchu.me/f/DJS3/github_ssh.png"></p>
<h2 id="hexo部署到GitHub"><a href="#hexo部署到GitHub" class="headerlink" title="hexo部署到GitHub"></a>hexo部署到GitHub</h2><ul>
<li><p>在blog文件夹下找到_config.yml,这是博客的配置文件,在这里可以修改博客的一些基本信息，打开它，找到下面这段内容,在最底下：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;&#x27;</span><br></pre></td></tr></table></figure>
<p>  修改deploy部分：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git   #username改为用户名</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li>
<li><p>另外找到第十六行，修改url为 <code>https://username.github.io</code></p>
</li>
<li><p>完成后保存文件并退出，在gitbash中输入：<code>npm install hexo-deployer-git --save</code>,安装git部署工具。</p>
</li>
<li><p>最后输入以下三行命令：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean           #清除缓存</span><br><span class="line">hexo g               #生产静态文章（博客）</span><br><span class="line">hexo d               #部署</span><br></pre></td></tr></table></figure></li>
<li><p>当然，如果仅是在本地查看效果，第三行命令也可以换成hexo s<br>  部署过程中可能会出现warning警告，但不要紧，只要最后呈现这样的内容，就表示成功了：<br>  <img src="https://cloud.yuchu.me/f/AQHE/hexo-d.png"><br>  之后，你就可以 <code>username.github.io</code>访问到你的博客了，且可以被任何人访问到。</p>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>在根目录打开gitbash：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;博客名称&quot;  #新建博客</span><br><span class="line">hexo clean          #清除缓存和静态文件</span><br><span class="line">hexo g              #生产静态文件</span><br><span class="line">hexo s              #生成离线版本</span><br><span class="line">hexo d              #部署</span><br></pre></td></tr></table></figure>

<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>我使用的是next，一款简洁美观的主题，功能强大，可拓展性强，在gitbash中下载：<br><code>git clone https://github.com/next-theme/hexo-theme-next themes/next</code><br>下载完成后，在blog下找到themes文件夹-next,打开主题的_config.yml文件，找到如下部分，大概在100行左右：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>这代表了四种不同风格的next主题，任选一个取消注释即可。<br>之后回到根目录的_config.yml文件，找到theme选项，输入next<br><img src="https://cloud.yuchu.me/f/znF4/hexo_theme.png"></p>
<h2 id="博客基本信息"><a href="#博客基本信息" class="headerlink" title="博客基本信息"></a>博客基本信息</h2><p>在blog下找到_config.yml并打开，配置站点信息<br><img src="https://cloud.yuchu.me/f/yXCL/hexo_site.png"><br>注意，语言要改成中文：zh-CN,其他的可以按个人喜好更改。</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github page</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>用alist+raidrive将网盘空间挂载到本地</title>
    <url>/posts/48fd/</url>
    <content><![CDATA[<h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="https://cloud.yuchu.me/f/2Bf8/alist1.jpg"><br><img src="https://cloud.yuchu.me/f/38h2/alist2.jpg"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过alist挂载网盘，然后用RaiDrive的webdav功能将网盘内容映射到本地，可以直接对网盘内容进行增删改查，实现近似本地词牌的功能。</p>
<h2 id="alist下载安装"><a href="#alist下载安装" class="headerlink" title="alist下载安装"></a>alist下载安装</h2><ol>
<li><a href="https://github.com/alist-org/alist/releases/download/v3.32.0/alist-windows-amd64.zip">alist官方下载</a><br>GitHub访问较慢的也可以从该链接下载:</li>
</ol>
<p><a href="https://cloud.yuchu.me/s/jRfM">alist下载</a></p>
<ol start="2">
<li>将下载的压缩包解压到指定的目录下</li>
<li>此目录下运行cmd，输入 <code>.\alist.exe server</code>开始安装程序</li>
<li>当看到输出<code>start server@0.0.0.0:5244</code>且后续无报错时，说明安装完成。初始会指定alist用户名为admin，并随机一个密码，该密码会在安装时展示，也可以使用<code>.\alist.exe admin</code>查询</li>
<li>安装成功后，浏览器打开 <code>127.0.0.1:5244</code>即可访问alist管理界面。输入刚刚的用户名和密码，点击<code>管理</code>，可以进入管理界面修改用户名和密码。</li>
<li>关闭该进程可以在cmd界面按下<code>Crtl+C</code>，之后重新启动以及更改密码可以在根目录使用如下命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alist start</span><br><span class="line">alist admin set your_passwd   #your_passwd改为你要更改的密码</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="alist挂载网盘"><a href="#alist挂载网盘" class="headerlink" title="alist挂载网盘"></a>alist挂载网盘</h2><p><em>点击管理界面的存储-添加-驱动，即可添加指定网盘，目前已支持几十种</em><br>这部分内容在alist的官方文档里已经足够详细，这里以阿里云盘为例，其他的不再赘述，附上官方文档链接，供大家参考<br><a href="https://alist.nn.ci/zh/guide/drivers/">alist官方文档&#x2F;添加存储</a></p>
<p> <strong>驱动</strong> 选择<code>阿里云盘open</code></p>
<p><strong>挂载路径</strong> 可自定义，比方说<code>/aliyun</code></p>
<p><strong>获取刷新令牌</strong><br>刷新令牌 根据文档里的说明进行获取，访问下面地址，按下面图片操作</p>
<p><a href="https://alist.nn.ci/tool/aliyundrive/request">地址</a><br><img src="https://cloud.yuchu.me/f/5Ds6/alist_aliyun.png"></p>
<p>复制 token，回到到刷新令牌处粘贴，点击保存</p>
<p><img src="https://cloud.yuchu.me/f/65ty/alist-aliyun.png"></p>
<h2 id="配置alist开机自启"><a href="#配置alist开机自启" class="headerlink" title="配置alist开机自启"></a>配置alist开机自启</h2><p>在alist根目录中新建文版文档，填入以下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set ws = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">ws.run &quot;alist.exe server&quot;,vbhide</span><br></pre></td></tr></table></figure>
<p>保存，更改后缀名为vbs，右键-创建快捷方式，将快捷方式移动到开机自启的目录<code>C：\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>下。该目录可以使用<code>Crtl+R</code>，输入<code>shell:Common Startup</code>回车后打开。</p>
<h2 id="raidrive安装与配置"><a href="#raidrive安装与配置" class="headerlink" title="raidrive安装与配置"></a>raidrive安装与配置</h2><p>直接访问官网下载对应版本，<br><a href="https://app.raidrive.com/download/raidrive/release/RaiDrive_2023.9.90_x64.msi">raidrive官网下载</a></p>
<p>之后一步步安装即可</p>
<h3 id="网盘映射"><a href="#网盘映射" class="headerlink" title="网盘映射"></a>网盘映射</h3><p>raidrive界面-添加-NAS-WebDAV</p>
<p><strong>虚拟驱动器</strong> 第一行选择喜欢的盘符字母，默认为Z</p>
<p><strong>地址</strong> 取消勾选 ，第一行第一格IP输入 127.0.0.1(或localhost) 第二格端口输入 5244</p>
<p>第二行输入<code>/dav</code>即可，这样alist挂载的所有网盘都会被映射到本地，也可以跟上特定后缀，比方说你的阿里云盘被挂载在alist的<code>/aliyun</code>目录下，那第二行就可以改成<code>/dav/aliyun</code>，这样，就只有阿里云盘被映射到本地了</p>
<p>第三行输入账户密码，点击连接即可。<br><img src="https://cloud.yuchu.me/f/74uZ/raidrive.png"></p>
<p>最后如果是这样的就代表没问题了，可以打开<code>我的电脑</code>查看是否有一个绿色的webdav出现。<br><img src="https://cloud.yuchu.me/f/4Oil/raidrive.jpg"></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>raidrive</tag>
        <tag>webdav</tag>
      </tags>
  </entry>
  <entry>
    <title>极简markdown语法</title>
    <url>/posts/f33f/</url>
    <content><![CDATA[<h1 id="极简markdown语法"><a href="#极简markdown语法" class="headerlink" title="极简markdown语法"></a>极简markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (&lt;\h3&gt;) (例如：### My Header)</p>
<h3 id="可选"><a href="#可选" class="headerlink" title="可选"></a>可选</h3><p>还可以在文本下方添加任意数量的 &#x3D;&#x3D; 号来标识一级标题，或者 – 号来标识二级标题。</p>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>要创建段落，请使用空白行将一行或多行文本进行分隔。</p>
<span id="more"></span>

<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(或使用HTML语法的<br>)。</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>要加粗文本，请在单词或短语的前后各添加两个星号（**内容**）或下划线（__内容__）。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号（这**是内**容）。</p>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>要用斜体显示文本，请在单词或短语前后添加一个星号（*内容*）或下划线（_内容_）。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p>
<h3 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体&amp;斜体"></a>粗体&amp;斜体</h3><p>要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>要创建块引用，请在段落前添加一个 &gt; 符号</p>
<h3 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h3><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 第一段</span><br><span class="line">&gt;</span><br><span class="line">&gt; 第二段</span><br></pre></td></tr></table></figure>

<h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 一层引用</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; 二层引用</span><br></pre></td></tr></table></figure>
<h2 id="带有其它元素的块引用"><a href="#带有其它元素的块引用" class="headerlink" title="带有其它元素的块引用"></a>带有其它元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; #### The quarterly results look great!</span><br><span class="line">&gt;</span><br><span class="line">&gt; - Revenue was off the chart.</span><br><span class="line">&gt; - Profits were higher than ever.</span><br><span class="line">&gt;</span><br><span class="line">&gt;  *Everything* is going according to **plan**.</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表<br>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表<br>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表</p>
<h3 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h3><p>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符。</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心</p>
<h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。</p>
<h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p>
<p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p>
<p>对应的HTML代码：<code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code></p>
<p>  这是一个链接 <code>[Markdown语法](https://markdown.com.cn)</code>。</p>
<h3 id="给链接增加-Title"><a href="#给链接增加-Title" class="headerlink" title="给链接增加 Title"></a>给链接增加 Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p>
<p>  这是一个链接 <code>[Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)</code></p>
<h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;https://markdown.com.cn&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></table></figure>

<h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p>
<h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p>
<p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p>
<p>以下示例格式对于链接的第一部分效果相同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[hobbit-hole][1]</span><br><span class="line">[hobbit-hole] [1]</span><br></pre></td></tr></table></figure>
<h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p>
<p>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如[label]:）。<br>链接的URL，可以选择将其括在尖括号中。<br>链接的可选标题，可以将其括在双引号，单引号或括号中。<br>以下示例格式对于链接的第二部分效果相同：</p>
<p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p>
<h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p>
<p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code>。</p>
<p>对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p>
<h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><p>给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。</p>
<h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>用docker搭建cloudreve个人网盘系统</title>
    <url>/posts/cf51/</url>
    <content><![CDATA[<h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="https://cloud.yuchu.me/f/x2ux/cloudreve.jpg"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>一台vps（若只是个人使用的话也可以是任意一台手机或电脑）</li>
<li>安装docker和docker-compose</li>
<li>一个域名（同第一条，仅个人使用可忽略，但你也不想每次登录都先输一大串IP地址吧）</li>
</ul>
<p> vps的话，国内推荐阿里云和腾讯云，都有学生优惠，能白嫖几个月，其他诸如雨云等没试过，不做推荐。国外有微软的azure，学生免费一年，亚马逊（容易被封且需要绑信用卡，有被反撸的可能），还有谷歌云，但也是需要信用卡，有被反撸的风险，digitalorcean通过GitHub学生包可以白嫖200美元额度，还有老牌付费vps厂家如vultr，新晋便宜vps商nackhard等，就不一一列举了。</p>
<p> 域名注册国内可以用阿里腾讯，国外namesilo,name.com,cloudflare等都还不错，便宜的域名一年十块左右就能搞定了（tips：纯数字域名，尤其是6位及以上的，一般会比字母域名便宜很多）</p>
<span id="more"></span>

<h2 id="新机到手，更新环境"><a href="#新机到手，更新环境" class="headerlink" title="新机到手，更新环境"></a>新机到手，更新环境</h2><p><code>apt update -y  &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget sudo socat vim</code></p>
<h2 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | sh      # 下载最新的官方脚本</span><br><span class="line"></span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose      #给予对应目录权限</span><br></pre></td></tr></table></figure>

<h1 id="Cloudreve和离线下载构建"><a href="#Cloudreve和离线下载构建" class="headerlink" title="Cloudreve和离线下载构建"></a>Cloudreve和离线下载构建</h1><h2 id="创建目录，创建文件"><a href="#创建目录，创建文件" class="headerlink" title="创建目录，创建文件"></a>创建目录，创建文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/ &amp;&amp; mkdir cloud &amp;&amp; cd cloud &amp;&amp; mkdir -vp cloudreve/&#123;uploads,avatar&#125; &amp;&amp; touch cloudreve/conf.ini &amp;&amp; touch cloudreve/cloudreve.db &amp;&amp; mkdir -p aria2/config &amp;&amp; mkdir -p data/aria2 &amp;&amp; chmod -R 777 data/aria2</span><br><span class="line"># cloud即根目录，aira2为离线下载工具，可按需求酌情考虑是否创建</span><br></pre></td></tr></table></figure>

<h2 id="创建compose配置文件"><a href="#创建compose配置文件" class="headerlink" title="创建compose配置文件"></a>创建compose配置文件</h2><p><code>cd /home/cloud/ &amp;&amp; vim docker-compose.yml</code></p>
<h2 id="在docker-compose中配置Cloudreve代码"><a href="#在docker-compose中配置Cloudreve代码" class="headerlink" title="在docker-compose中配置Cloudreve代码"></a>在docker-compose中配置Cloudreve代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  cloudreve:</span><br><span class="line"></span><br><span class="line">    container_name: cloudreve</span><br><span class="line"></span><br><span class="line">    image: cloudreve/cloudreve:latest</span><br><span class="line"></span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">    ports:</span><br><span class="line"></span><br><span class="line">      - &quot;5212:5212&quot;</span><br><span class="line"></span><br><span class="line">    volumes:</span><br><span class="line"></span><br><span class="line">      - temp_data:/data</span><br><span class="line"></span><br><span class="line">      - ./cloudreve/uploads:/cloudreve/uploads</span><br><span class="line"></span><br><span class="line">      - ./cloudreve/conf.ini:/cloudreve/conf.ini</span><br><span class="line"></span><br><span class="line">      - ./cloudreve/cloudreve.db:/cloudreve/cloudreve.db</span><br><span class="line"></span><br><span class="line">      - ./cloudreve/avatar:/cloudreve/avatar</span><br><span class="line"></span><br><span class="line">    depends_on:</span><br><span class="line"></span><br><span class="line">      - aria2</span><br><span class="line"></span><br><span class="line">   aria2:</span><br><span class="line"></span><br><span class="line">    container_name: aria2</span><br><span class="line"></span><br><span class="line">    image: p3terx/aria2-pro</span><br><span class="line"></span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line">    environment:</span><br><span class="line"></span><br><span class="line">      - RPC_SECRET= DOWNLOAD</span><br><span class="line"></span><br><span class="line">      - RPC_PORT=6800</span><br><span class="line"></span><br><span class="line">    volumes:</span><br><span class="line"></span><br><span class="line">      - ./aria2/config:/config</span><br><span class="line"></span><br><span class="line">      - temp_data:/data </span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line"></span><br><span class="line">  temp_data:</span><br><span class="line"></span><br><span class="line">    driver: local</span><br><span class="line"></span><br><span class="line">    driver_opts:</span><br><span class="line"></span><br><span class="line">      type: none</span><br><span class="line"></span><br><span class="line">      device: $PWD/data</span><br><span class="line"></span><br><span class="line">      o: bind</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>cd /home/cloud &amp;&amp; docker-compose up -d</code></p>
<p>容器正常启动后就可以用服务器IP+端口号5212进入网盘设置界面了</p>
<p><img src="https://cloud.yuchu.me/f/w0ty/cloudreve_login.jpg"></p>
<h2 id="查询初始登录账号密码"><a href="#查询初始登录账号密码" class="headerlink" title="查询初始登录账号密码"></a>查询初始登录账号密码</h2><p><code>docker-compose logs cloudreve</code></p>
<p>一般初始账号为<code>admin@cloudreve.org </code>，密码为<code>admin</code></p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>点击头像-管理面板，找到用户组&#x2F;用户,点右边的编辑，可以进行一些基础的配置，包括但不限于分配空间，更改账号密码等。<br><img src="https://cloud.yuchu.me/f/rRi2/cloudreve_edit.jpg"><br><img src="https://cloud.yuchu.me/f/vlsA/cloudreve_user.jpg"></p>
<p>添加存储策略，有详细的文档，这里就不赘述了，个人推荐onedrive，主要是免费。当然如果你的vps空间足够或者不打算存太多东西的话，默认的本机存储也可以。</p>
<h3 id="离线下载节点配置"><a href="#离线下载节点配置" class="headerlink" title="离线下载节点配置"></a>离线下载节点配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RPC 服务器地址 =&gt; http://aria2:6800</span><br><span class="line">RPC 授权令牌 =&gt; DOWNLOAD</span><br><span class="line">节点下载目录 =&gt; /data</span><br></pre></td></tr></table></figure>

<h1 id="NGINX反向代理到域名"><a href="#NGINX反向代理到域名" class="headerlink" title="NGINX反向代理到域名"></a>NGINX反向代理到域名</h1><p>配置dns解析：<img src="https://cloud.yuchu.me/f/qjhX/dns.jpg"></p>
<h2 id="创建nginx目录结构"><a href="#创建nginx目录结构" class="headerlink" title="创建nginx目录结构"></a>创建nginx目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/nginx</span><br><span class="line"></span><br><span class="line">touch /home/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">mkdir -p /home/nginx/certs</span><br></pre></td></tr></table></figure>

<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --register-account -m xxxx@gmail.com   #随便一个邮箱就行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue -d yourip.com --standalone     # yourip.com改为你的域名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="下载证书到本地"><a href="#下载证书到本地" class="headerlink" title="下载证书到本地"></a>下载证书到本地</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d yourip.com --key-file /home/nginx/certs/key.pem --fullchain-file /home/nginx/certs/cert.pem</span><br></pre></td></tr></table></figure>

<h2 id="进入目录配置nginx"><a href="#进入目录配置nginx" class="headerlink" title="进入目录配置nginx"></a>进入目录配置nginx</h2><p><code>cd /home/nginx/ &amp;&amp; nano nginx.conf</code></p>
<h2 id="反向代理配置，代理指定IP加端口"><a href="#反向代理配置，代理指定IP加端口" class="headerlink" title="反向代理配置，代理指定IP加端口"></a>反向代理配置，代理指定IP加端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  client_max_body_size 1000m;  </span><br><span class="line"></span><br><span class="line">  #上传限制参数1G以内文件可上传</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 同理，替换为你的域名</span><br><span class="line"></span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 替换域名</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/certs/cert.pem;</span><br><span class="line"></span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/key.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:5212;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下载部署容器"><a href="#下载部署容器" class="headerlink" title="下载部署容器"></a>下载部署容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -p 443:443 -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf -v /home/nginx/certs:/etc/nginx/certs -v /home/nginx/html:/usr/share/nginx/html nginx:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h2><p><code>docker ps -a</code><br><img src="https://cloud.yuchu.me/f/1lcq/mirror.jpg"><br>可以看到容器都是正常运行的</p>
<p>之后就可以用域名访问你的cloudreve网盘了！</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>个人网盘</tag>
        <tag>cloudreve</tag>
      </tags>
  </entry>
  <entry>
    <title>解决POST请求被Nginx转换成GET的问题</title>
    <url>/posts/1b48/</url>
    <content><![CDATA[<p>前几天把自己的一个项目扔到了服务器上，用nginx+域名反代了一下ip+端口，测试却发现请求失败，日志里的报错信息显示不支持的请求类型</p>
<h4 id="waht"><a href="#waht" class="headerlink" title="waht?"></a>waht?</h4><p>明明本地跑的好好的啊，一番排查之后才找到问题，我这个项目实际上是一个api接口，只接受POST请求，但nginx的配置文件里有一个return 301步骤把http请求都转发给了https，转发之后，POST请求就变成了GET，查了一些资料，发现原来只要把return301 改成307就好了</p>
<p>比方说我原本的nginx.conf是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;        </span><br><span class="line"></span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         </span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/certs/cert.pem;</span><br><span class="line"></span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/key.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:11451;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>只需要改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 同理，替换为你的域名</span><br><span class="line"></span><br><span class="line">    return 307 https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name yourip.com;         # 替换域名</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/certs/cert.pem;</span><br><span class="line"></span><br><span class="line">    ssl_certificate_key /etc/nginx/certs/key.pem;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:5212;</span><br><span class="line"></span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>就可以了。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>POST</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>运维岗需要掌握的K8s基础</title>
    <url>/posts/c3f/</url>
    <content><![CDATA[<hr>
<h1 id="Kubernetes-K8s-运维笔记"><a href="#Kubernetes-K8s-运维笔记" class="headerlink" title="Kubernetes (K8s) 运维笔记"></a>Kubernetes (K8s) 运维笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#1-kubernetes-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">Kubernetes 基础概念</a></li>
<li><a href="#2-pod-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86">Pod 生命周期管理</a></li>
<li><a href="#3-kubernetes-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">Kubernetes 常用命令</a></li>
<li><a href="#4-k8s-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86">K8s 资源管理</a></li>
<li><a href="#5-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6">网络插件</a></li>
<li><a href="#6-%E8%B0%83%E5%BA%A6%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">调度与负载均衡</a></li>
<li><a href="#7-kubernetes-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7">Kubernetes 高可用性</a></li>
</ol>
<hr>
<h2 id="1-Kubernetes-基础概念"><a href="#1-Kubernetes-基础概念" class="headerlink" title="1. Kubernetes 基础概念"></a>1. Kubernetes 基础概念</h2><h3 id="K8s-核心组件"><a href="#K8s-核心组件" class="headerlink" title="K8s 核心组件"></a><strong>K8s 核心组件</strong></h3><table>
<thead>
<tr>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Pod</strong></td>
<td>最小的部署单元，封装一个或多个容器</td>
</tr>
<tr>
<td><strong>Node</strong></td>
<td>集群中的单个计算节点，运行 Pod 和代理服务</td>
</tr>
<tr>
<td><strong>Cluster</strong></td>
<td>一组 Node，协调资源的调度和管理</td>
</tr>
<tr>
<td><strong>Kube-apiserver</strong></td>
<td>集群的入口点，处理 REST 请求</td>
</tr>
<tr>
<td><strong>etcd</strong></td>
<td>用于存储集群的状态数据</td>
</tr>
<tr>
<td><strong>Kube-scheduler</strong></td>
<td>负责 Pod 的调度到 Node</td>
</tr>
<tr>
<td><strong>Kube-controller-manager</strong></td>
<td>负责管理控制器，实现自动化控制</td>
</tr>
<tr>
<td><strong>Kubelet</strong></td>
<td>运行在每个 Node 上，管理 Pod 和容器</td>
</tr>
<tr>
<td><strong>Kube-proxy</strong></td>
<td>处理网络规则，负载均衡 Pod 请求</td>
</tr>
</tbody></table>
<hr>
<h2 id="2-Pod-生命周期管理"><a href="#2-Pod-生命周期管理" class="headerlink" title="2. Pod 生命周期管理"></a>2. Pod 生命周期管理</h2><h3 id="Pod-生命周期阶段"><a href="#Pod-生命周期阶段" class="headerlink" title="Pod 生命周期阶段"></a><strong>Pod 生命周期阶段</strong></h3><ul>
<li><strong>Pending</strong>: Pod 被创建，但未绑定到 Node。</li>
<li><strong>Running</strong>: Pod 已绑定到 Node 并启动了容器。</li>
<li><strong>Succeeded</strong>: 所有容器成功完成并退出。</li>
<li><strong>Failed</strong>: 某些容器异常终止并退出。</li>
<li><strong>Unknown</strong>: 无法与 Node 通信。</li>
</ul>
<h3 id="Pod-生命周期管理组件"><a href="#Pod-生命周期管理组件" class="headerlink" title="Pod 生命周期管理组件"></a><strong>Pod 生命周期管理组件</strong></h3><table>
<thead>
<tr>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Init Containers</strong></td>
<td>初始化容器，确保主容器启动前某些任务完成</td>
</tr>
<tr>
<td><strong>Liveness Probe</strong></td>
<td>健康检查，确保容器存活</td>
</tr>
<tr>
<td><strong>Readiness Probe</strong></td>
<td>就绪检查，确保容器可接受流量</td>
</tr>
<tr>
<td><strong>Startup Probe</strong></td>
<td>启动检查，确保容器启动后运行稳定</td>
</tr>
</tbody></table>
<hr>
<h2 id="3-Kubernetes-常用命令"><a href="#3-Kubernetes-常用命令" class="headerlink" title="3. Kubernetes 常用命令"></a>3. Kubernetes 常用命令</h2><h3 id="集群管理命令"><a href="#集群管理命令" class="headerlink" title="集群管理命令"></a><strong>集群管理命令</strong></h3><ul>
<li><p>查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有 Node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 Pod 详情</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe pod &lt;pod_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Pod-操作命令"><a href="#Pod-操作命令" class="headerlink" title="Pod 操作命令"></a><strong>Pod 操作命令</strong></h3><ul>
<li><p>查看所有 Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run &lt;pod_name&gt; --image=&lt;image_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除 Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pod &lt;pod_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a><strong>其他常用命令</strong></h3><ul>
<li><p>获取 Service 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 Deployment 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get deployment</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4-K8s-资源管理"><a href="#4-K8s-资源管理" class="headerlink" title="4. K8s 资源管理"></a>4. K8s 资源管理</h2><h3 id="资源种类"><a href="#资源种类" class="headerlink" title="资源种类"></a><strong>资源种类</strong></h3><ul>
<li><strong>Pod</strong>: Kubernetes 中最小的部署单元。</li>
<li><strong>Service</strong>: 用于暴露 Pod 服务，支持负载均衡。</li>
<li><strong>ConfigMap</strong>: 存储配置信息，用于 Pod 内配置文件。</li>
<li><strong>Secret</strong>: 安全存储敏感信息，例如密码和 API 密钥。</li>
<li><strong>Volume</strong>: 用于持久化存储，Pod 重启后数据不会丢失。</li>
</ul>
<h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a><strong>命令示例</strong></h3><ul>
<li><p>创建 Deployment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create deployment &lt;name&gt; --image=&lt;image&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete &lt;resource_type&gt; &lt;resource_name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="5-网络插件"><a href="#5-网络插件" class="headerlink" title="5. 网络插件"></a>5. 网络插件</h2><h3 id="常见网络插件"><a href="#常见网络插件" class="headerlink" title="常见网络插件"></a><strong>常见网络插件</strong></h3><ul>
<li><strong>Flannel</strong>: 最基础的网络插件，简单易用。</li>
<li><strong>Calico</strong>: 支持网络策略，灵活且性能好。</li>
<li><strong>Weave</strong>: 支持自动网络发现和加密。</li>
<li><strong>Cilium</strong>: 基于 eBPF，支持细粒度的安全控制。</li>
</ul>
<h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a><strong>插件管理</strong></h3><ul>
<li><p>安装 Flannel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看网络状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="6-调度与负载均衡"><a href="#6-调度与负载均衡" class="headerlink" title="6. 调度与负载均衡"></a>6. 调度与负载均衡</h2><h3 id="K8s-调度算法"><a href="#K8s-调度算法" class="headerlink" title="K8s 调度算法"></a><strong>K8s 调度算法</strong></h3><ul>
<li><strong>RR (Round Robin)</strong>: 按顺序将请求调度到不同节点。</li>
<li><strong>Least Connections</strong>: 将请求调度到连接数最少的节点。</li>
<li><strong>Resource-Based</strong>: 根据节点资源使用情况进行调度。</li>
</ul>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><strong>负载均衡</strong></h3><ul>
<li>Kubernetes 内置 <strong>Service</strong> 对 Pod 进行负载均衡。</li>
<li>使用 <strong>Ingress</strong> 管理外部 HTTP 和 HTTPS 访问。</li>
</ul>
<hr>
<h2 id="7-Kubernetes-高可用性"><a href="#7-Kubernetes-高可用性" class="headerlink" title="7. Kubernetes 高可用性"></a>7. Kubernetes 高可用性</h2><h3 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a><strong>高可用架构</strong></h3><ul>
<li><strong>Master 高可用</strong>: 通过多 Master 节点保证控制平面高可用。</li>
<li><strong>etcd 高可用</strong>: 使用 etcd 集群存储数据，保证高可用。</li>
<li><strong>Node 高可用</strong>: 通过节点间冗余，Pod 可以在不同节点上运行，避免单点故障。</li>
</ul>
<h3 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a><strong>水平扩展</strong></h3><ul>
<li>使用 Horizontal Pod Autoscaler (HPA) 根据负载自动扩展 Pod。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>K8s</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次开发过程中涉及性能问题分析的乌龙事件，顺便谈谈python的装饰器</title>
    <url>/posts/7f74/</url>
    <content><![CDATA[<p>在开发QQ机器人项目的过程中，我经历了一次颇具戏剧性的性能问题排查。这次乌龙事件不仅让我对Python的装饰器机制有了更深入的理解，也让我明白了细节对于程序性能的重要性。在此，我想分享整个排查过程，并深入探讨Python的装饰器。</p>
<h2 id="问题的起因"><a href="#问题的起因" class="headerlink" title="问题的起因"></a>问题的起因</h2><p>为了提高代码的复用性和可维护性，我在项目中广泛使用了Python的装饰器，来实现鉴权、计算函数运行时间、捕获异常、限速、超时重试、屏蔽词过滤等功能。</p>
<p>某天，当我完成这些装饰器的更新后，重新运行机器人，意外地发现：原本仅需3到5秒就能回复消息的机器人，竟需要等待十几二十秒才能响应。这种明显的性能下降引起了我的注意。</p>
<h2 id="初步排查"><a href="#初步排查" class="headerlink" title="初步排查"></a>初步排查</h2><p>面对这个问题，我首先怀疑是程序内部逻辑出了问题。为了找到可能的异常，我在与消息处理相关的各个位置添加了日志。然而，日志显示程序运行正常，没有任何异常信息。</p>
<p>接下来，我怀疑是否是系统资源瓶颈导致的。于是，我检查了电脑的内存占用和硬盘I&#x2F;O，结果它们都在正常范围内。而且，项目使用的是以高性能著称的MongoDB数据库，理论上应该不会成为瓶颈。</p>
<p>为了彻底排除数据库的问题，我尝试在消息数据和数据库之间增加一层缓存，直接使用内存来保存消息队列。然而，这并没有改善速度，机器人回复仍然需要十几秒。</p>
<h2 id="灵光一闪"><a href="#灵光一闪" class="headerlink" title="灵光一闪"></a>灵光一闪</h2><p>一系列的排查未能找到问题所在，让我一度陷入迷茫。突然，我灵光一闪，想到可以设计一个新的装饰器，用来计算函数的执行时间，从而精确定位问题。</p>
<p>于是，我编写了一个计算函数执行时间的装饰器，并将其应用在所有涉及网络通信、I&#x2F;O操作、内存读写、进程间通信和线程切换的函数上，逐一排查性能瓶颈。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">async_timed</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算异步函数执行时间的装饰器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            start = asyncio.get_event_loop().time()</span><br><span class="line">            result = <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">            end = asyncio.get_event_loop().time()</span><br><span class="line">            logger.debug(<span class="string">f&quot;函数 <span class="subst">&#123;func.__name__&#125;</span> 执行时间: <span class="subst">&#123;end - start:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>通过这个装饰器，我发现网络通信部分正常，耗时在3到5秒之间；其他与计算机相关的操作耗时也很短。真正的问题出现在消息的处理和发送部分。</p>
<h2 id="问题的根源"><a href="#问题的根源" class="headerlink" title="问题的根源"></a>问题的根源</h2><p>原来，为了控制机器人发消息的速度，防止被服务器认为是刷屏，我在处理和发送消息的函数上添加了一个限速装饰器。最初的限速装饰器实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rate_limit</span>(<span class="params">calls: <span class="built_in">int</span>, period: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;限速装饰器&quot;&quot;&quot;</span></span><br><span class="line">    semaphore = asyncio.Semaphore(calls)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> semaphore:</span><br><span class="line">                result = <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(period / calls)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>这个实现存在一个严重问题：在每次函数执行后，都强制 </p>
<p><code>await asyncio.sleep(period / calls)</code></p>
<p>，这会导致函数阻塞，从而严重影响了机器人的响应速度。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>意识到问题所在后，我决定重新设计限速装饰器，采用更为高效的令牌桶算法（Token Bucket Algorithm），以避免阻塞。</p>
<h3 id="新的限速装饰器实现"><a href="#新的限速装饰器实现" class="headerlink" title="新的限速装饰器实现"></a>新的限速装饰器实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rate_limit</span>(<span class="params">calls: <span class="built_in">int</span>, period: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;限速装饰器，使用令牌桶算法控制调用频率&quot;&quot;&quot;</span></span><br><span class="line">    max_tokens = calls            <span class="comment"># 令牌桶的容量</span></span><br><span class="line">    tokens = calls                <span class="comment"># 当前令牌数</span></span><br><span class="line">    refill_time = period / calls  <span class="comment"># 每个令牌的填充时间</span></span><br><span class="line">    last_check = time.time()      <span class="comment"># 上次检查的时间</span></span><br><span class="line">    lock = asyncio.Lock()         <span class="comment"># 异步锁，确保线程安全</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> tokens, last_check</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> lock:</span><br><span class="line">                current = time.time()</span><br><span class="line">                <span class="comment"># 计算自上次检查后应添加的令牌数</span></span><br><span class="line">                elapsed = current - last_check</span><br><span class="line">                refill = elapsed / refill_time</span><br><span class="line">                <span class="keyword">if</span> refill &gt; <span class="number">0</span>:</span><br><span class="line">                    tokens = <span class="built_in">min</span>(tokens + refill, max_tokens)</span><br><span class="line">                    last_check = current</span><br><span class="line">                <span class="keyword">if</span> tokens &gt;= <span class="number">1</span>:</span><br><span class="line">                    tokens -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 计算需要等待的时间</span></span><br><span class="line">                    wait_time = refill_time - elapsed % refill_time</span><br><span class="line">                    <span class="keyword">await</span> asyncio.sleep(wait_time)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> wrapper(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<h3 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h3><ol>
<li><p><strong>变量初始化</strong>：</p>
<ul>
<li><code>max_tokens</code>：令牌桶的最大容量。</li>
<li><code>tokens</code>：当前令牌数，初始为满值。</li>
<li><code>refill_time</code>：每个令牌的重新填充时间。</li>
<li><code>last_check</code>：上次检查令牌的时间。</li>
<li><code>lock</code>：异步锁，确保多协程环境下的线程安全。</li>
</ul>
</li>
<li><p><strong>令牌更新逻辑</strong>：</p>
<ul>
<li>计算时间差 <code>elapsed</code>，根据时间差计算新增加的令牌数 <code>refill</code>。</li>
<li>更新当前令牌数 <code>tokens</code>，并确保不超过最大容量。</li>
<li>更新 <code>last_check</code> 时间。</li>
</ul>
</li>
<li><p><strong>处理请求</strong>：</p>
<ul>
<li>如果有足够的令牌（<code>tokens &gt;= 1</code>），则扣除一个令牌，直接执行函数。</li>
<li>如果令牌不足，则计算需要等待的时间 <code>wait_time</code>，异步等待后递归调用 <code>wrapper</code>。</li>
</ul>
</li>
</ol>
<h3 id="应用新的装饰器"><a href="#应用新的装饰器" class="headerlink" title="应用新的装饰器"></a>应用新的装饰器</h3><p>将新的限速装饰器应用到消息发送函数上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@rate_limit(<span class="params">calls=<span class="number">10</span>, period=<span class="number">60</span></span>)  </span><span class="comment"># 限速，每分钟最多10次调用</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_msg</span>(<span class="params">msg_type, number, msg, use_voice=<span class="literal">False</span>, is_error_message=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment"># 消息发送逻辑</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>这样，在不阻塞其他协程的情况下，成功地限制了消息发送的频率，机器人回复速度恢复正常。</p>
<h2 id="进一步的装饰器应用"><a href="#进一步的装饰器应用" class="headerlink" title="进一步的装饰器应用"></a>进一步的装饰器应用</h2><p>在项目中，我还使用了其他装饰器，如过滤敏感词、处理异常等。</p>
<h3 id="过滤消息装饰器"><a href="#过滤消息装饰器" class="headerlink" title="过滤消息装饰器"></a>过滤消息装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_message</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;过滤消息的装饰器&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">message, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(message, <span class="built_in">dict</span>):</span><br><span class="line">            content = message.get(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment"># 如果是系统消息，跳过检查</span></span><br><span class="line">            <span class="keyword">if</span> message.get(<span class="string">&#x27;role&#x27;</span>) == <span class="string">&#x27;system&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> func(message, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            content = <span class="built_in">str</span>(message)</span><br><span class="line"></span><br><span class="line">        blocked_word = word_filter.contains_blocked_word(content) <span class="comment"># 你可以先把屏蔽词放进一个json或者yaml文件里，然后写一个读取的函数</span></span><br><span class="line">        <span class="keyword">if</span> blocked_word:</span><br><span class="line">            logger.warning(<span class="string">f&quot;检测到敏感词&#x27;<span class="subst">&#123;blocked_word&#125;</span>&#x27;，消息已被过滤。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 或者返回特定的提示消息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> func(message, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>该装饰器在消息处理函数执行前，检测消息内容是否包含敏感词，若包含则过滤掉，确保消息的合规性。</p>
<h3 id="异常处理装饰器"><a href="#异常处理装饰器" class="headerlink" title="异常处理装饰器"></a>异常处理装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">error_handler</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;捕获并处理异常的装饰器&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(<span class="string">f&quot;执行函数 <span class="subst">&#123;func.__name__&#125;</span> 时发生异常：<span class="subst">&#123;e&#125;</span>&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 根据需要返回特定的错误提示</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抱歉，处理您的请求时出现错误。&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>这个装饰器捕获异步函数执行过程中可能出现的异常，防止程序崩溃，并提供统一的错误处理机制。</p>
<h3 id="鉴权装饰器"><a href="#鉴权装饰器" class="headerlink" title="鉴权装饰器"></a>鉴权装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">admin_only</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;管理员权限检查装饰器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">msg_type, user_info, *args, **kwargs</span>):</span><br><span class="line">        user_id = user_info[<span class="string">&#x27;user_id&#x27;</span>]</span><br><span class="line">        logger.info(<span class="string">f&quot;Checking admin status for user: <span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(user_id) != <span class="built_in">str</span>(config.ADMIN_ID):</span><br><span class="line">            logger.warning(<span class="string">f&quot;Non-admin user <span class="subst">&#123;user_id&#125;</span> attempted to use admin command&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;对不起，您没有执行此命令的权限。&quot;</span></span><br><span class="line">        logger.info(<span class="string">f&quot;Admin command executed by user: <span class="subst">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> func(msg_type, user_info, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<h3 id="超时重试装饰器"><a href="#超时重试装饰器" class="headerlink" title="超时重试装饰器"></a>超时重试装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">retry</span>(<span class="params">max_retries: <span class="built_in">int</span> = <span class="number">3</span>, delay: <span class="built_in">float</span> = <span class="number">1.0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;重试装饰器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">if</span> attempt == max_retries - <span class="number">1</span>:</span><br><span class="line">                        logger.error(<span class="string">f&quot;函数 <span class="subst">&#123;func.__name__&#125;</span> 在 <span class="subst">&#123;max_retries&#125;</span> 次尝试后仍然失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">raise</span></span><br><span class="line">                    <span class="keyword">await</span> asyncio.sleep(delay * (<span class="number">2</span> ** attempt))  <span class="comment"># 指数退避</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<h2 id="深入理解Python的装饰器"><a href="#深入理解Python的装饰器" class="headerlink" title="深入理解Python的装饰器"></a>深入理解Python的装饰器</h2><p>通过这次实践，我对Python的装饰器有了更深入的理解。</p>
<h3 id="装饰器的本质"><a href="#装饰器的本质" class="headerlink" title="装饰器的本质"></a>装饰器的本质</h3><p>装饰器本质上是一个返回函数的函数，它可以在不修改原函数代码的情况下，增加新的功能。装饰器通过对原函数进行包装，控制其输入和输出。</p>
<h3 id="使用-wraps保持元数据"><a href="#使用-wraps保持元数据" class="headerlink" title="使用@wraps保持元数据"></a>使用<code>@wraps</code>保持元数据</h3><p>在编写装饰器时，使用 <code>@functools.wraps(func)</code> 可以保留原函数的元数据，如函数名、注释等。这对于调试和文档生成非常有用。</p>
<h3 id="装饰器的顺序"><a href="#装饰器的顺序" class="headerlink" title="装饰器的顺序"></a>装饰器的顺序</h3><p>当一个函数被多个装饰器装饰时，装饰器的应用顺序是自下而上，即最内层的装饰器先被应用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator_a</span></span><br><span class="line"><span class="meta">@decorator_b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>等同于 </p>
<p>func &#x3D; decorator_a(decorator_b(func))</p>
<p>。</p>
<h3 id="装饰器在异步函数中的应用"><a href="#装饰器在异步函数中的应用" class="headerlink" title="装饰器在异步函数中的应用"></a>装饰器在异步函数中的应用</h3><p>在异步编程中，装饰器需要兼容 <code>async</code>&#x2F;<code>await</code> 语法。例如，装饰器内部的函数需要使用 <code>async def</code> 定义，并在适当的位置使用 <code>await</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次乌龙事件让我深刻体会到细节对程序性能的影响。通过重新设计限速装饰器，采用更合理的算法，不仅解决了性能问题，还加深了我对Python装饰器的理解。</p>
<p>在开发过程中，使用装饰器可以提高代码的可读性和可维护性，但也需要谨慎，确保装饰器的实现不会引入新的问题。</p>
<p>最后，希望我的分享能对大家有所帮助。如果你也有类似的经验或想法，欢迎在评论区与我交流！</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>装饰器</tag>
        <tag>性能优化</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>运维岗需要掌握的Redis基础和优化技巧</title>
    <url>/posts/a4af/</url>
    <content><![CDATA[<hr>
<h1 id="Redis-运维笔记"><a href="#Redis-运维笔记" class="headerlink" title="Redis 运维笔记"></a>Redis 运维笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#1-redis-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">Redis 基本概念</a></li>
<li><a href="#2-redis-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6">Redis 持久化机制</a></li>
<li><a href="#3-redis-%E9%AB%98%E5%8F%AF%E7%94%A8">Redis 高可用</a></li>
<li><a href="#4-redis-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">Redis 常用命令</a></li>
<li><a href="#5-redis-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">Redis 性能优化</a></li>
</ol>
<hr>
<h2 id="1-Redis-基本概念"><a href="#1-Redis-基本概念" class="headerlink" title="1. Redis 基本概念"></a>1. Redis 基本概念</h2><h3 id="Redis-是什么？"><a href="#Redis-是什么？" class="headerlink" title="Redis 是什么？"></a><strong>Redis 是什么？</strong></h3><ul>
<li>Redis 是一个开源的内存数据结构存储系统，支持多种数据结构如：字符串、哈希、列表、集合、有序集合等。</li>
<li>Redis 提供持久化机制，可以将内存中的数据保存到磁盘中，重启时加载使用。</li>
</ul>
<h3 id="Redis-应用场景"><a href="#Redis-应用场景" class="headerlink" title="Redis 应用场景"></a><strong>Redis 应用场景</strong></h3><ul>
<li><strong>缓存</strong>: 提高访问速度，减少数据库压力。</li>
<li><strong>分布式锁</strong>: 利用 Redis 的原子操作实现高效分布式锁。</li>
<li><strong>消息队列</strong>: 利用列表结构实现高效队列。</li>
</ul>
<hr>
<h2 id="2-Redis-持久化机制"><a href="#2-Redis-持久化机制" class="headerlink" title="2. Redis 持久化机制"></a>2. Redis 持久化机制</h2><p>Redis 支持两种主要的持久化方式：</p>
<h3 id="1-RDB-Redis-Database-Backup"><a href="#1-RDB-Redis-Database-Backup" class="headerlink" title="1. RDB (Redis Database Backup)"></a><strong>1. RDB (Redis Database Backup)</strong></h3><ul>
<li><p><strong>原理</strong>: 在指定时间间隔内生成数据快照并保存到磁盘。</p>
</li>
<li><p><strong>优点</strong>: RDB 文件紧凑，适合备份。</p>
</li>
<li><p><strong>缺点</strong>: 数据不是实时持久化，可能丢失部分数据。</p>
</li>
<li><p><strong>配置示例</strong>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-AOF-Append-Only-File"><a href="#2-AOF-Append-Only-File" class="headerlink" title="2. AOF (Append-Only File)"></a><strong>2. AOF (Append-Only File)</strong></h3><ul>
<li><p><strong>原理</strong>: 记录每次写操作，以日志的形式追加到文件中。</p>
</li>
<li><p><strong>优点</strong>: 数据持久化更实时，默认每秒保存一次。</p>
</li>
<li><p><strong>缺点</strong>: AOF 文件比 RDB 更大，恢复速度较慢。</p>
</li>
<li><p><strong>配置示例</strong>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="选择合适的持久化方式"><a href="#选择合适的持久化方式" class="headerlink" title="选择合适的持久化方式"></a><strong>选择合适的持久化方式</strong></h3><ul>
<li><strong>RDB</strong>: 用于备份，适合在不要求实时性但需要快速恢复的场景。</li>
<li><strong>AOF</strong>: 用于数据更实时的持久化，但需要更多的磁盘资源。</li>
</ul>
<hr>
<h2 id="3-Redis-高可用"><a href="#3-Redis-高可用" class="headerlink" title="3. Redis 高可用"></a>3. Redis 高可用</h2><h3 id="1-主从复制-Master-Slave-Replication"><a href="#1-主从复制-Master-Slave-Replication" class="headerlink" title="1. 主从复制 (Master-Slave Replication)"></a><strong>1. 主从复制 (Master-Slave Replication)</strong></h3><ul>
<li>Redis 支持异步复制，一个 Master 可以有多个 Slave。</li>
<li>Slave 只读，接收 Master 数据的更新。</li>
<li><strong>命令</strong>:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SLAVEOF &lt;master-ip&gt; &lt;master-port&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-哨兵模式-Sentinel"><a href="#2-哨兵模式-Sentinel" class="headerlink" title="2. 哨兵模式 (Sentinel)"></a><strong>2. 哨兵模式 (Sentinel)</strong></h3><ul>
<li>实现高可用性，哨兵可以监控主从实例的运行状态，并在主节点故障时自动进行故障转移。</li>
<li><strong>优点</strong>: 自动故障切换，监控实例状态。</li>
<li><strong>配置文件</strong>:<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-Redis-集群-Redis-Cluster"><a href="#3-Redis-集群-Redis-Cluster" class="headerlink" title="3. Redis 集群 (Redis Cluster)"></a><strong>3. Redis 集群 (Redis Cluster)</strong></h3><ul>
<li><strong>分布式</strong>: 将数据分布在多个节点上，支持水平扩展。</li>
<li><strong>哈希槽 (Hash Slot)</strong>: Redis 集群通过哈希槽将数据分布在多个节点，集群默认有 16384 个槽。</li>
<li>支持自动分片和故障转移。</li>
</ul>
<hr>
<h2 id="4-Redis-常用命令"><a href="#4-Redis-常用命令" class="headerlink" title="4. Redis 常用命令"></a>4. Redis 常用命令</h2><h3 id="键管理"><a href="#键管理" class="headerlink" title="键管理"></a><strong>键管理</strong></h3><ul>
<li><p>查看所有键:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KEYS *</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除键:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEL &lt;key&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a><strong>字符串操作</strong></h3><ul>
<li><p>设置键值:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键值:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET &lt;key&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a><strong>列表操作</strong></h3><ul>
<li><p>添加元素到列表:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LPUSH &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取列表元素:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LRANGE &lt;key&gt; 0 -1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="哈希操作"><a href="#哈希操作" class="headerlink" title="哈希操作"></a><strong>哈希操作</strong></h3><ul>
<li><p>设置哈希字段:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HSET &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取哈希字段:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HGET &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a><strong>集合操作</strong></h3><ul>
<li><p>添加元素到集合:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SADD &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合所有元素:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SMEMBERS &lt;key&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="有序集合操作"><a href="#有序集合操作" class="headerlink" title="有序集合操作"></a><strong>有序集合操作</strong></h3><ul>
<li><p>添加元素到有序集合:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZADD &lt;key&gt; &lt;score&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取有序集合元素:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZRANGE &lt;key&gt; 0 -1</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="5-Redis-性能优化"><a href="#5-Redis-性能优化" class="headerlink" title="5. Redis 性能优化"></a>5. Redis 性能优化</h2><h3 id="1-使用缓存"><a href="#1-使用缓存" class="headerlink" title="1. 使用缓存"></a><strong>1. 使用缓存</strong></h3><ul>
<li>合理设置缓存过期时间，避免占用过多内存。</li>
<li>配置示例:<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">maxmemory 2gb</span><br><span class="line">maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-数据分区"><a href="#2-数据分区" class="headerlink" title="2. 数据分区"></a><strong>2. 数据分区</strong></h3><ul>
<li>使用 Redis 集群，将数据分散到不同节点，减少单个节点的压力。</li>
</ul>
<h3 id="3-禁用-AOF-或调整-AOF-策略"><a href="#3-禁用-AOF-或调整-AOF-策略" class="headerlink" title="3. 禁用 AOF 或调整 AOF 策略"></a><strong>3. 禁用 AOF 或调整 AOF 策略</strong></h3><ul>
<li>如果对数据一致性要求不高，可以禁用 AOF 或调整为 <code>everysec</code> 以提高性能。</li>
</ul>
<h3 id="4-优化-Redis-配置"><a href="#4-优化-Redis-配置" class="headerlink" title="4. 优化 Redis 配置"></a><strong>4. 优化 Redis 配置</strong></h3><ul>
<li>增加后台线程，调整 <code>io-threads</code> 来提升并发性能。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>运维岗需要掌握的Linux命令</title>
    <url>/posts/57a2/</url>
    <content><![CDATA[<hr>
<h1 id="Linux-基础运维笔记"><a href="#Linux-基础运维笔记" class="headerlink" title="Linux 基础运维笔记"></a>Linux 基础运维笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#1-rpm-%E5%8C%85%E7%AE%A1%E7%90%86">RPM 包管理</a></li>
<li><a href="#2-yum-%E5%8C%85%E7%AE%A1%E7%90%86">YUM 包管理</a></li>
<li><a href="#3-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86">文件系统管理</a></li>
<li><a href="#4-lvm-%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9">LVM 动态扩容</a></li>
<li><a href="#5-%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD%E6%9F%A5%E7%9C%8B">系统负载查看</a></li>
<li><a href="#6-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%88%86%E5%8C%BA">磁盘管理与分区</a></li>
<li><a href="#7-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86">进程管理</a></li>
<li><a href="#8-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86">网络管理</a></li>
<li><a href="#9-%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86">安全管理</a></li>
<li><a href="#10-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86">日志管理</a></li>
</ol>
<hr>
<h2 id="1-RPM-包管理"><a href="#1-RPM-包管理" class="headerlink" title="1. RPM 包管理"></a>1. RPM 包管理</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>查看包文件列表</td>
<td><code>rpm -ql &lt;package_name&gt;</code></td>
</tr>
<tr>
<td>安装包</td>
<td><code>rpm -ivh &lt;package.rpm&gt;</code></td>
</tr>
<tr>
<td>升级包</td>
<td><code>rpm -Uvh &lt;package.rpm&gt;</code></td>
</tr>
<tr>
<td>卸载包</td>
<td><code>rpm -e &lt;package_name&gt;</code></td>
</tr>
<tr>
<td>查询已安装包</td>
<td><code>rpm -qa</code></td>
</tr>
<tr>
<td>检查文件来源</td>
<td><code>rpm -qf &lt;file_path&gt;</code></td>
</tr>
<tr>
<td>验证包</td>
<td><code>rpm -V &lt;package_name&gt;</code></td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ql httpd</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh nginx-1.20.1.rpm</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-YUM-包管理"><a href="#2-YUM-包管理" class="headerlink" title="2. YUM 包管理"></a>2. YUM 包管理</h2><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出可用包</td>
<td><code>yum list available</code></td>
</tr>
<tr>
<td>安装包</td>
<td><code>yum install &lt;package_name&gt;</code></td>
</tr>
<tr>
<td>更新系统中所有包</td>
<td><code>yum update</code></td>
</tr>
<tr>
<td>卸载包</td>
<td><code>yum remove &lt;package_name&gt;</code></td>
</tr>
<tr>
<td>查看包信息</td>
<td><code>yum info &lt;package_name&gt;</code></td>
</tr>
<tr>
<td>列出已安装的包</td>
<td><code>yum list installed</code></td>
</tr>
<tr>
<td>清除缓存</td>
<td><code>yum clean all</code></td>
</tr>
</tbody></table>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove httpd</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-文件系统管理"><a href="#3-文件系统管理" class="headerlink" title="3. 文件系统管理"></a>3. 文件系统管理</h2><h3 id="挂载与卸载文件系统"><a href="#挂载与卸载文件系统" class="headerlink" title="挂载与卸载文件系统"></a><strong>挂载与卸载文件系统</strong></h3><ul>
<li><p><strong>挂载文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount &lt;device&gt; &lt;mount_point&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>卸载文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount &lt;mount_point&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看当前挂载的文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件系统的创建"><a href="#文件系统的创建" class="headerlink" title="文件系统的创建"></a><strong>文件系统的创建</strong></h3><ul>
<li><p><strong>创建 ext4 文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdX</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 xfs 文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/sdX</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4-LVM-动态扩容"><a href="#4-LVM-动态扩容" class="headerlink" title="4. LVM 动态扩容"></a>4. LVM 动态扩容</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h3><ol>
<li><p><strong>创建物理卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdX</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建卷组</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgcreate &lt;volume_group_name&gt; /dev/sdX</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建逻辑卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvcreate -L &lt;size&gt; -n &lt;logical_volume_name&gt; &lt;volume_group_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>扩展逻辑卷</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -L +&lt;size&gt; /dev/&lt;volume_group&gt;/&lt;logical_volume&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>扩展文件系统</strong></p>
<ul>
<li><p>对 ext4 文件系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/&lt;volume_group&gt;/&lt;logical_volume&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对 xfs 文件系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfs_growfs /dev/&lt;volume_group&gt;/&lt;logical_volume&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-系统负载查看"><a href="#5-系统负载查看" class="headerlink" title="5. 系统负载查看"></a>5. 系统负载查看</h2><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td>实时查看系统状态，包括 CPU、内存、任务</td>
</tr>
<tr>
<td><code>htop</code></td>
<td><code>top</code> 的增强版，提供更丰富的界面和操作</td>
</tr>
<tr>
<td><code>uptime</code></td>
<td>查看系统启动时间、负载信息</td>
</tr>
<tr>
<td><code>vmstat</code></td>
<td>查看系统虚拟内存、IO、进程等信息</td>
</tr>
<tr>
<td><code>iostat</code></td>
<td>查看磁盘 I&#x2F;O 使用情况</td>
</tr>
<tr>
<td><code>sar</code></td>
<td>收集系统性能数据，需安装 <code>sysstat</code></td>
</tr>
</tbody></table>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uptime</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmstat</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-磁盘管理与分区"><a href="#6-磁盘管理与分区" class="headerlink" title="6. 磁盘管理与分区"></a>6. 磁盘管理与分区</h2><h3 id="查看磁盘使用情况"><a href="#查看磁盘使用情况" class="headerlink" title="查看磁盘使用情况"></a><strong>查看磁盘使用情况</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<h3 id="查看磁盘-I-O-活动"><a href="#查看磁盘-I-O-活动" class="headerlink" title="查看磁盘 I&#x2F;O 活动"></a><strong>查看磁盘 I&#x2F;O 活动</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat</span><br></pre></td></tr></table></figure>

<h3 id="磁盘分区工具"><a href="#磁盘分区工具" class="headerlink" title="磁盘分区工具"></a><strong>磁盘分区工具</strong></h3><ul>
<li><p>**<code>fdisk</code>**：适用于 MBR 分区格式磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>
</li>
<li><p>**<code>parted</code>**：适用于 GPT 分区格式磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sda</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a><strong>创建分区</strong></h3><ol>
<li><p><strong>使用 <code>fdisk</code> 创建分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>parted</code> 创建 GPT 分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sda mklabel gpt</span><br><span class="line">parted /dev/sda mkpart primary 0% 100%</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="7-进程管理"><a href="#7-进程管理" class="headerlink" title="7. 进程管理"></a>7. 进程管理</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a><strong>查看进程</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure>

<h3 id="查看进程树"><a href="#查看进程树" class="headerlink" title="查看进程树"></a><strong>查看进程树</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pstree</span><br></pre></td></tr></table></figure>

<h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a><strong>杀死进程</strong></h3><ul>
<li><p><strong>正常终止</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>强制杀死</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 &lt;pid&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="8-网络管理"><a href="#8-网络管理" class="headerlink" title="8. 网络管理"></a>8. 网络管理</h2><h3 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a><strong>查看网络配置</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h3 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a><strong>查看路由表</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route -n</span><br></pre></td></tr></table></figure>

<h3 id="测试网络连通性"><a href="#测试网络连通性" class="headerlink" title="测试网络连通性"></a><strong>测试网络连通性</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping &lt;hostname or IP&gt;</span><br></pre></td></tr></table></figure>

<h3 id="检查端口状态"><a href="#检查端口状态" class="headerlink" title="检查端口状态"></a><strong>检查端口状态</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tuln</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="9-安全管理"><a href="#9-安全管理" class="headerlink" title="9. 安全管理"></a>9. 安全管理</h2><h3 id="防火墙管理"><a href="#防火墙管理" class="headerlink" title="防火墙管理"></a><strong>防火墙管理</strong></h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>firewalld</code></td>
<td>动态防火墙管理工具</td>
</tr>
<tr>
<td><code>iptables</code></td>
<td>传统防火墙规则配置工具</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>Firewalld 命令</strong></p>
<ul>
<li>启动 Firewalld：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li>
<li>允许某端口（如 80 端口）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure></li>
<li>重启防火墙：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>iptables 命令</strong></p>
<ul>
<li>查看规则：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure></li>
<li>允许某端口（如 80 端口）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a><strong>用户与权限管理</strong></h3><ul>
<li><p><strong>创建用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd &lt;username&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel &lt;username&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改用户密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd &lt;username&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看当前用户</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更改文件权限</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 &lt;file&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更改文件属主</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> &lt;owner&gt;:&lt;group&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="10-日志管理"><a href="#10-日志管理" class="headerlink" title="10. 日志管理"></a>10. 日志管理</h2><h3 id="常见日志文件"><a href="#常见日志文件" class="headerlink" title="常见日志文件"></a><strong>常见日志文件</strong></h3><table>
<thead>
<tr>
<th>日志文件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/messages</code></td>
<td>通用系统日志</td>
</tr>
<tr>
<td><code>/var/log/secure</code></td>
<td>安全相关日志（如登录、sudo 操作等）</td>
</tr>
<tr>
<td><code>/var/log/dmesg</code></td>
<td>内核日志</td>
</tr>
<tr>
<td><code>/var/log/boot.log</code></td>
<td>启动日志</td>
</tr>
<tr>
<td><code>/var/log/httpd/</code></td>
<td>Apache 日志文件夹</td>
</tr>
<tr>
<td><code>/var/log/nginx/</code></td>
<td>Nginx 日志文件夹</td>
</tr>
</tbody></table>
<h3 id="日志查看与监控"><a href="#日志查看与监控" class="headerlink" title="日志查看与监控"></a><strong>日志查看与监控</strong></h3><ul>
<li><p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/messages</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实时查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/messages</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>运维岗需要掌握的SRE和系统性能监控知识</title>
    <url>/posts/276b/</url>
    <content><![CDATA[<hr>
<h1 id="系统性能监控笔记"><a href="#系统性能监控笔记" class="headerlink" title="系统性能监控笔记"></a>系统性能监控笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#1-linux-%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD%E7%9B%91%E6%8E%A7">Linux 系统负载监控</a></li>
<li><a href="#2-%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7">网络监控</a></li>
<li><a href="#3-%E7%A3%81%E7%9B%98%E4%B8%8E-io-%E7%9B%91%E6%8E%A7">磁盘与 IO 监控</a></li>
<li><a href="#4-%E5%86%85%E5%AD%98%E7%9B%91%E6%8E%A7">内存监控</a></li>
<li><a href="#5-%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7">系统性能分析工具</a></li>
</ol>
<hr>
<h2 id="1-Linux-系统负载监控"><a href="#1-Linux-系统负载监控" class="headerlink" title="1. Linux 系统负载监控"></a>1. Linux 系统负载监控</h2><h3 id="查看系统负载"><a href="#查看系统负载" class="headerlink" title="查看系统负载"></a><strong>查看系统负载</strong></h3><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a><strong>uptime</strong></h4><ul>
<li>显示系统的负载平均值。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uptime</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a><strong>top</strong></h4><ul>
<li>动态显示系统的进程和负载信息。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="load-average-的含义"><a href="#load-average-的含义" class="headerlink" title="load average 的含义"></a><strong>load average</strong> 的含义</h4><ul>
<li>Load average 是系统在 1 分钟、5 分钟、15 分钟内的平均负载。</li>
</ul>
<hr>
<h2 id="2-网络监控"><a href="#2-网络监控" class="headerlink" title="2. 网络监控"></a>2. 网络监控</h2><h3 id="查看网络连接状态"><a href="#查看网络连接状态" class="headerlink" title="查看网络连接状态"></a><strong>查看网络连接状态</strong></h3><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a><strong>netstat</strong></h4><ul>
<li>显示网络连接、路由表、接口统计信息。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ss"><a href="#ss" class="headerlink" title="ss"></a><strong>ss</strong></h4><ul>
<li>替代 <code>netstat</code> 的工具，更加快速。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -antp</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="查看带宽使用情况"><a href="#查看带宽使用情况" class="headerlink" title="查看带宽使用情况"></a><strong>查看带宽使用情况</strong></h3><h4 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a><strong>iftop</strong></h4><ul>
<li>实时监控网络流量。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iftop</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="nload"><a href="#nload" class="headerlink" title="nload"></a><strong>nload</strong></h4><ul>
<li>监控网络接口带宽使用情况。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nload</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="3-磁盘与-IO-监控"><a href="#3-磁盘与-IO-监控" class="headerlink" title="3. 磁盘与 IO 监控"></a>3. 磁盘与 IO 监控</h2><h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a><strong>查看磁盘空间</strong></h3><h4 id="df"><a href="#df" class="headerlink" title="df"></a><strong>df</strong></h4><ul>
<li>显示磁盘使用情况。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="du"><a href="#du" class="headerlink" title="du"></a><strong>du</strong></h4><ul>
<li>显示文件和目录的磁盘使用情况。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh &lt;directory&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="监控-IO-性能"><a href="#监控-IO-性能" class="headerlink" title="监控 IO 性能"></a><strong>监控 IO 性能</strong></h3><h4 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a><strong>iostat</strong></h4><ul>
<li>监控 CPU 和设备的 IO 统计。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iostat</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a><strong>iotop</strong></h4><ul>
<li>实时查看磁盘 IO 使用情况。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iotop</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4-内存监控"><a href="#4-内存监控" class="headerlink" title="4. 内存监控"></a>4. 内存监控</h2><h3 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a><strong>查看内存使用情况</strong></h3><h4 id="free"><a href="#free" class="headerlink" title="free"></a><strong>free</strong></h4><ul>
<li>显示系统的内存使用情况。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a><strong>vmstat</strong></h4><ul>
<li>报告虚拟内存统计信息。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmstat</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="top-1"><a href="#top-1" class="headerlink" title="top"></a><strong>top</strong></h4><ul>
<li>在 <code>top</code> 命令中查看内存使用情况。</li>
</ul>
<hr>
<h2 id="5-系统性能分析工具"><a href="#5-系统性能分析工具" class="headerlink" title="5. 系统性能分析工具"></a>5. 系统性能分析工具</h2><h3 id="sar"><a href="#sar" class="headerlink" title="sar"></a><strong>sar</strong></h3><ul>
<li>收集、报告和保存系统活动信息。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sar -u 1 3   <span class="comment"># 每秒收集一次 CPU 使用率，连续三次</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a><strong>htop</strong></h3><ul>
<li>类似 <code>top</code>，但提供了更好的 UI 和更多功能。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="perf"><a href="#perf" class="headerlink" title="perf"></a><strong>perf</strong></h3><ul>
<li>Linux 性能分析工具，用于剖析 CPU 使用情况和应用性能。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perf top</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>SRE</tag>
        <tag>系统性能监控</tag>
      </tags>
  </entry>
  <entry>
    <title>运维岗需要掌握的数据库基础和调优技巧</title>
    <url>/posts/8a4/</url>
    <content><![CDATA[<hr>
<h1 id="数据库运维笔记"><a href="#数据库运维笔记" class="headerlink" title="数据库运维笔记"></a>数据库运维笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">数据库基本概念</a></li>
<li><a href="#2-mysql-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">MySQL 基本操作</a></li>
<li><a href="#3-%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">高可用解决方案</a></li>
<li><a href="#4-%E5%B8%B8%E8%A7%81-sql-%E8%AF%AD%E5%8F%A5">常见 SQL 语句</a></li>
<li><a href="#5-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D">数据库备份与恢复</a></li>
<li><a href="#6-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">数据库性能优化</a></li>
</ol>
<hr>
<h2 id="1-数据库基本概念"><a href="#1-数据库基本概念" class="headerlink" title="1. 数据库基本概念"></a>1. 数据库基本概念</h2><h3 id="ACID-特性"><a href="#ACID-特性" class="headerlink" title="ACID 特性"></a><strong>ACID 特性</strong></h3><ul>
<li><strong>Atomicity（原子性）</strong>: 事务的所有操作要么全部完成，要么全部不完成。</li>
<li><strong>Consistency（一致性）</strong>: 事务执行前后，数据库处于一致状态。</li>
<li><strong>Isolation（隔离性）</strong>: 并发事务互不干扰。</li>
<li><strong>Durability（持久性）</strong>: 事务一旦提交，修改将永久保存。</li>
</ul>
<h3 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a><strong>数据库引擎</strong></h3><ul>
<li><strong>InnoDB</strong>: 支持事务，支持外键，提供崩溃恢复功能。</li>
<li><strong>MyISAM</strong>: 不支持事务，速度快，适用于读多写少的应用。</li>
</ul>
<hr>
<h2 id="2-MySQL-基本操作"><a href="#2-MySQL-基本操作" class="headerlink" title="2. MySQL 基本操作"></a>2. MySQL 基本操作</h2><h3 id="启动与停止-MySQL-服务"><a href="#启动与停止-MySQL-服务" class="headerlink" title="启动与停止 MySQL 服务"></a><strong>启动与停止 MySQL 服务</strong></h3><ul>
<li><p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a><strong>登录 MySQL</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h3 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a><strong>数据库管理</strong></h3><ul>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a><strong>用户管理</strong></h3><ul>
<li><p>创建用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="3-高可用解决方案"><a href="#3-高可用解决方案" class="headerlink" title="3. 高可用解决方案"></a>3. 高可用解决方案</h2><h3 id="主从复制-Master-Slave-Replication"><a href="#主从复制-Master-Slave-Replication" class="headerlink" title="主从复制 (Master-Slave Replication)"></a><strong>主从复制 (Master-Slave Replication)</strong></h3><ul>
<li><strong>主服务器 (Master)</strong>: 负责处理写操作，数据变化会传递给从服务器。</li>
<li><strong>从服务器 (Slave)</strong>: 负责处理读操作，并同步主服务器的数据。</li>
</ul>
<h3 id="双主复制-Master-Master-Replication"><a href="#双主复制-Master-Master-Replication" class="headerlink" title="双主复制 (Master-Master Replication)"></a><strong>双主复制 (Master-Master Replication)</strong></h3><ul>
<li>两个服务器互为主服务器，支持双向数据同步。</li>
</ul>
<h3 id="PXC-Percona-XtraDB-Cluster-或-Galera-Cluster"><a href="#PXC-Percona-XtraDB-Cluster-或-Galera-Cluster" class="headerlink" title="PXC (Percona XtraDB Cluster) 或 Galera Cluster"></a><strong>PXC (Percona XtraDB Cluster)</strong> 或 <strong>Galera Cluster</strong></h3><ul>
<li>提供多主复制，所有节点都能读写，实现真正的高可用。</li>
</ul>
<h3 id="Keepalived-MySQL-通过虚拟-IP-实现-MySQL-的高可用性，保证数据库服务不间断。"><a href="#Keepalived-MySQL-通过虚拟-IP-实现-MySQL-的高可用性，保证数据库服务不间断。" class="headerlink" title="Keepalived + MySQL: 通过虚拟 IP 实现 MySQL 的高可用性，保证数据库服务不间断。"></a><strong>Keepalived + MySQL</strong>: 通过虚拟 IP 实现 MySQL 的高可用性，保证数据库服务不间断。</h3><hr>
<h2 id="4-常见-SQL-语句"><a href="#4-常见-SQL-语句" class="headerlink" title="4. 常见 SQL 语句"></a>4. 常见 SQL 语句</h2><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a><strong>数据查询</strong></h3><ul>
<li><p>查询所有数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询指定条件的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a><strong>数据插入</strong></h3><ul>
<li>插入数据到表中<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2) <span class="keyword">VALUES</span> (value1, value2);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a><strong>数据更新</strong></h3><ul>
<li>更新表中的数据<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column1 <span class="operator">=</span> value1 <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a><strong>数据删除</strong></h3><ul>
<li>删除表中的数据<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表结构管理"><a href="#表结构管理" class="headerlink" title="表结构管理"></a><strong>表结构管理</strong></h3><ul>
<li><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">  column1 datatype,</span><br><span class="line">  column2 datatype,</span><br><span class="line">  ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> column_name datatype;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="5-数据库备份与恢复"><a href="#5-数据库备份与恢复" class="headerlink" title="5. 数据库备份与恢复"></a>5. 数据库备份与恢复</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a><strong>备份</strong></h3><ul>
<li>使用 <code>mysqldump</code> 进行数据库备份<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p database_name &gt; backup.sql</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a><strong>恢复</strong></h3><ul>
<li><p>从备份文件恢复数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p database_name &lt; backup.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复所有数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p &lt; alldatabases_backup.sql</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a><strong>增量备份</strong></h3><ul>
<li>使用 binlog 进行增量备份<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog binlog.000001 &gt; incremental_backup.sql</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="6-数据库性能优化"><a href="#6-数据库性能优化" class="headerlink" title="6. 数据库性能优化"></a>6. 数据库性能优化</h2><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a><strong>索引优化</strong></h3><ul>
<li><p>使用索引加速查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表的索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX idx_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a><strong>查询优化</strong></h3><ul>
<li>避免使用 <code>SELECT *</code>，只查询需要的字段。</li>
<li>使用 <code>EXPLAIN</code> 语句分析查询语句的执行计划。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表优化"><a href="#表优化" class="headerlink" title="表优化"></a><strong>表优化</strong></h3><ul>
<li>对表进行碎片整理，提升性能<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">OPTIMIZE <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a><strong>缓存优化</strong></h3><ul>
<li>使用查询缓存减少重复查询，提升性能。<ul>
<li>启用查询缓存：<br>在 MySQL 配置文件 <code>my.cnf</code> 中添加<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">query_cache_type</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">query_cache_size</span> = <span class="number">64</span>M</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法的python实现</title>
    <url>/posts/b91d/</url>
    <content><![CDATA[<p><code>事情是这样的，压根没学过什么人工智能相关课程的笔者收到了这样一份小组作业：</code><br><img src="https://cloud.yuchu.me/f/9VF2/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95.jpg"></p>
<p><code>于是不得不从网上找结局方案（其实就是想吃现成的），发现遗传算法似乎不是很难，而且代码量也不大，而笔者的python又学的好凑合，便决定来用python实现遗传算法，来完成这一小组作业</code></p>
<h1 id="遗传算法简介"><a href="#遗传算法简介" class="headerlink" title="遗传算法简介"></a>遗传算法简介</h1><p>遗传算法简称GA（Genetic Algorithms）模拟自然界生物遗传学（孟德尔）和生物进化论（达尔文）通过人工方式所构造的一类并行随机搜索最优化方法，是对生物进化过程“优胜劣汰，适者生存”这一过程进行的一种数学仿真。</p>
<p>其实说白了，这玩意其实大家在高中就接触过了，孟德尔的豌豆实验，摩尔根果蝇实验，本质上都是一种遗传算法的实现（<code>这么说其实不太准确，爸爸像儿子了属于是</code>）,基本思路就是复制-挑选-迭代-挑选-迭代······</p>
<h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><ul>
<li>直接对结构对象进行操作，不存在求导和函数连续性的限定；</li>
<li>具有内在的隐含并行性和更好的全局寻优能力； </li>
<li>采用概率化的寻优方法，能自动获取和指导优化的搜索空间，自适应地调整搜索方向，不需要确定的规则。</li>
</ul>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>如图：<br><img src="https://pic3.zhimg.com/v2-d154a26ba4f993442dfbf872dd4807ee_r.jpg"></p>
<p>遗传算法主要执行以下四步： </p>
<ul>
<li>随机地建立由字符串组成的初始群体； </li>
<li>计算各个体的适应度； </li>
<li>根据遗传概率，利用下述操作产生新群体：<ul>
<li>复制。将已有的优良个体复制后添入新群体中，删除劣质个体；</li>
<li>交换。将选出的两个个体进行交换，所产生的新个体添入新群体中。</li>
<li>突变。随机地改变某一个体的某个字符后添入新群体中。</li>
</ul>
</li>
<li>反复执行（2）、（3）后，一旦达到终止条件，选择最佳个体作为遗传算法的结果。</li>
</ul>
<h2 id="算法实例"><a href="#算法实例" class="headerlink" title="算法实例"></a>算法实例</h2><p>求f(x) &#x3D; $x^2$ 极大值问题，设自变量 x 介于0～31，求其二次函数的最大值，即：max f(x) &#x3D; $x^2$, x∈ [0, 31]</p>
<p>（1）编码 遗传算法首先要对实际问题进行编码，用字符串表达问题。这种字符串相当于遗传学中的染色体。每一代所产生的字符串个体总和称为群体。为了实现的方便，通常字符串长度固定，字符选0或1。 本例中，利用5位二进制数表示x值，采用随机产生的方法，假设得出拥有四个个体的初始群体，即：01101，11000，01000，10011。x值相应为13，24，8，19。</p>
<table>
<thead>
<tr>
<th>个体编号</th>
<th>初始群体</th>
<th>Xi</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>01101</td>
<td>13</td>
</tr>
<tr>
<td>2</td>
<td>11000</td>
<td>24</td>
</tr>
<tr>
<td>3</td>
<td>01000</td>
<td>8</td>
</tr>
<tr>
<td>4</td>
<td>10011</td>
<td>19</td>
</tr>
</tbody></table>
<p>（2）计算适应度 衡量字符串（染色体）好坏的指标是适应度，它也就是遗传算法的目标函数。本例中用$x^2$计算。</p>
<table>
<thead>
<tr>
<th>个体编号</th>
<th>初始群体</th>
<th>Xi</th>
<th>适应度f(Xi)</th>
<th>f(Xi)&#x2F;Εf(Xi)</th>
<th>f(Xi)&#x2F;f</th>
<th>Mp</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>01101</td>
<td>13</td>
<td>169</td>
<td>0.14</td>
<td>0.58</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>11000</td>
<td>24</td>
<td>576</td>
<td>0.49</td>
<td>1.97</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>01000</td>
<td>8</td>
<td>64</td>
<td>0.06</td>
<td>0.22</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>10011</td>
<td>19</td>
<td>361</td>
<td>0.31</td>
<td>1.23</td>
<td>1</td>
</tr>
<tr>
<td>总计Σf(Xi)</td>
<td></td>
<td></td>
<td>1170</td>
<td>1.00</td>
<td>4.00</td>
<td>4</td>
</tr>
<tr>
<td>平均值f</td>
<td></td>
<td></td>
<td>293</td>
<td>0.25</td>
<td>1.00</td>
<td>1</td>
</tr>
<tr>
<td>最大值</td>
<td></td>
<td></td>
<td>576</td>
<td>0.49</td>
<td>1.97</td>
<td>2</td>
</tr>
<tr>
<td>最小值</td>
<td></td>
<td></td>
<td>64</td>
<td>0.06</td>
<td>0.22</td>
<td>0</td>
</tr>
</tbody></table>
<p>表中还列出了当前适应度的总和$∑f(x_i)$及平均值f</p>
<p>表中第6列的 f(xi)&#x2F;f 表示每个个体的相对适应度，它反映了个体之间的相对优劣性。如2号个体的 f(xi)&#x2F;f 值最高（1.97），为优良个体，3号个体最低（0.22），为不良个体。</p>
<p>（3）复制 根据相对适应度的大小对个体进行取舍，2号个体性能最优，予以复制繁殖。3号个体性能最差，将它删除，使之死亡，表中的M表示传递给下一代的个体数目，其中2号个体占2个，3号个体为0，1号、4号个体保持为1个。这样，就产生了下一代群体</p>
<p><img src="https://pic2.zhimg.com/80/v2-5265d39025bdc20987f7e00bf7d8e8a9_720w.webp"></p>
<p>复制后产生的新一代群体的平均适应度明显增加，由原来的293增加到421 （4）交换 利用随机配对的方法，决定1号和2号个体、3号和4号个体分别交换，如表中第5列。再利用随机定位的方法，确定这两对母体交叉换位的位置分别从字符长度的第4位及第3位开始。如：3号、4号个体从字符长度第3位开始交换。交换开始的位置称交换点</p>
<p><img src="https://pic1.zhimg.com/80/v2-e748e4bcd732a5716b7a8afd8e96ab44_720w.webp"></p>
<p>（5）突变 将个体字符串某位符号进行逆变，即由1变为0或由0变为1。例如，下式左侧的个体于第3位突变，得到新个体如右侧所示。</p>
<p><img src="https://pic2.zhimg.com/80/v2-573296c6a884ab7d18d40954f5627a4d_720w.webp"></p>
<p>遗传算法中，个体是否进行突变以及在哪个部位突变，都由事先给定的概率决定。通常，突变概率很小，本例的第一代中就没有发生突变。</p>
<p>上述（2）～（5）反复执行，直至得出满意的最优解。</p>
<p>综上可以看出，遗传算法参考生物中有关进化与遗传的过程，利用复制、交换、突变等操作，不断循环执行，逐渐逼近全局最优解。</p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>（1）编码与解码 将不同的实数表示成不同的0，1二进制串表示就完成了编码，因此我们并不需要去了解一个实数对应的二进制具体是多少，我们只需要保证有一个映射能够将十进制的数编码为二进制即可。而在最后我们肯定要将编码后的二进制串转换为我们理解的十进制串，所以我们需要的是y &#x3D; f ( x )的逆映射，也就是将二进制转化为十进制，也就是解码，十进制与二进制相互映射的关系以下为例进行说明： 例如 ：对于一个长度为10的二进制串,如[0,0,0,1,0,0,0,0,0,1]，将其映射到[1,3]这个区间 1. 首先将二进制数按权展开：$0 2^9+02^8+02^7+12^6+02^5+02^4+02^3+02^2+02^1+12^0&#x3D;65$ 2. 然后将其压缩到区间[0,1]：$65&#x2F;(2^{10} - 1) \approx0.0635386$ 3. 最后将[0,1]区间的数映射到我们想要的区间[1,3]：$0.0635386*（3-1）+ 1\approx1.12707722$，可以看出规律为：num * (high-low)+low 其中num为[0,1]之间的数对应此处的0.0635386，high和low表示我们想要映射的区间的上边界和下边界，分别对应此处的3和1。</p>
<p>现在再来看看编码过程。不难看出上面我们的DNA（二进制串）长为10，10位二进制可以表示$2^{10}$种不同的状态，可以看成是将最后要转化为的十进制区间 [ 1 , 3 ] 切分成$2^{10}$份。可看出，如果我们增加二进制串的长度，那么我们对区间的切分可以更加精细，转化后的十进制解也更加精确。所以DNA长度越长，解码为10进制的实数越精确</p>
<p>另外需要注意的是一个基因可能存储了多个数据的信息，在进行解码时注意将其分开，如一个基因含有x,y两个数据，该基因型的长度为20，可以用前10位表示x，后10位表示y，解码时分开进行解码。</p>
<p>（2）适应度 在实际问题中，有时希望适应度越大越好（如赢利、劳动生产率），有时要求适应度越小越好（费用、方差）。为了使遗传算法有通用性，这种最大、最小值问题宜统一表达。通常都统一按最大值问题处理，而且不允许适应度小于0。 对于最小值问题，其适应度按下式转换：</p>
<p><img src="https://pic2.zhimg.com/80/v2-3f9a3c816b9e5dc56f4faf25b1e5b7c9_720w.webp"></p>
<p><img src="https://pic2.zhimg.com/80/v2-e2261edf41236cd3bc123594b343cf99_720w.webp"></p>
<p>(3)选择 有了适度函数，然后就可以根据某个基因的适应度函数的值与所有基因适应度的总和的比值作为选择的依据，该值大的个体更易被选择，可以通过有放回的随机采样来模拟选择的过程，有放回的随机采样的方式可以参考我的这篇博客: 随机采样 (4)交叉和变异 交叉和 变异都是随机发生的，对于交叉而言，随机选择其双亲，并随机选择交叉点位，按照一定的概率进行交叉操作。可以通过以下方式实现：首先选择种群中的每个基因作为父亲，然后通过产生一个[0,1]随机数,将其与定义的交叉概率比较，如果小于该数，则在种群中随机选择另外的母亲，随机选择交叉点位进行交叉。 （5）举例 利用遗传算法求Rosenbrock函数的极大值</p>
<p><img src="https://pic1.zhimg.com/80/v2-253ac5068fdb7b26a6a48b049ca8cbb0_720w.webp"></p>
<h2 id="算法源码"><a href="#算法源码" class="headerlink" title="算法源码"></a>算法源码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np  # 导入numpy库，用于数学运算</span><br><span class="line">import matplotlib.pyplot as plt  # 导入matplotlib的pyplot模块，用于绘图</span><br><span class="line">from matplotlib import cm  # 导入matplotlib的颜色映射模块</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D  # 导入3D绘图工具</span><br><span class="line"></span><br><span class="line"># 定义遗传算法的参数</span><br><span class="line">DNA_SIZE = 24  # DNA的长度，即染色体的位数</span><br><span class="line">POP_SIZE = 80  # 种群的大小，即染色体的数量</span><br><span class="line">CROSSOVER_RATE = 0.6  # 交叉率，表示种群中有多少比例的个体会进行交叉操作</span><br><span class="line">MUTATION_RATE = 0.01  # 变异率，表示基因突变的概率</span><br><span class="line">N_GENERATIONS = 100  # 进化的代数</span><br><span class="line">X_BOUND = [-2.048, 2.048]  # x的取值范围</span><br><span class="line">Y_BOUND = [-2.048, 2.048]  # y的取值范围</span><br><span class="line"></span><br><span class="line"># 定义目标函数，即优化问题中的函数</span><br><span class="line">def F(x, y):</span><br><span class="line">    return 100.0 * (y - x ** 2.0) ** 2.0 + (1 - x) ** 2.0</span><br><span class="line"></span><br><span class="line"># 定义3D绘图函数</span><br><span class="line">def plot_3d(ax):</span><br><span class="line">    X = np.linspace(*X_BOUND, 100)  # 生成x的等差数列</span><br><span class="line">    Y = np.linspace(*Y_BOUND, 100)  # 生成y的等差数列</span><br><span class="line">    X, Y = np.meshgrid(X, Y)  # 生成网格</span><br><span class="line">    Z = F(X, Y)  # 计算每个点的函数值</span><br><span class="line">    ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm)  # 绘制3D曲面</span><br><span class="line">    ax.set_xlabel(&#x27;x&#x27;)  # 设置x轴标签</span><br><span class="line">    ax.set_ylabel(&#x27;y&#x27;)  # 设置y轴标签</span><br><span class="line">    ax.set_zlabel(&#x27;z&#x27;)  # 设置z轴标签</span><br><span class="line">    plt.pause(3)  # 暂停3秒</span><br><span class="line">    plt.show()  # 显示图形</span><br><span class="line"></span><br><span class="line"># 适应度函数，用于评估个体的适应度</span><br><span class="line">def get_fitness(pop):</span><br><span class="line">    x, y = translateDNA(pop)  # 将DNA转换为x, y坐标</span><br><span class="line">    pred = F(x, y)  # 计算适应度</span><br><span class="line">    return pred</span><br><span class="line"></span><br><span class="line"># DNA转换函数，将二进制编码的DNA转换为实数解</span><br><span class="line">def translateDNA(pop):</span><br><span class="line">    x_pop = pop[:, 0:DNA_SIZE]  # 提取x坐标的DNA部分</span><br><span class="line">    y_pop = pop[:, DNA_SIZE:]  # 提取y坐标的DNA部分</span><br><span class="line">    x = x_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (X_BOUND[1] - X_BOUND[0]) + X_BOUND[0]</span><br><span class="line">    y = y_pop.dot(2 ** np.arange(DNA_SIZE)[::-1]) / float(2 ** DNA_SIZE - 1) * (Y_BOUND[1] - Y_BOUND[0]) + Y_BOUND[0]</span><br><span class="line">    return x, y</span><br><span class="line"></span><br><span class="line"># 交叉和变异函数</span><br><span class="line">def crossover_and_mutation(pop, CROSSOVER_RATE=CROSSOVER_RATE):</span><br><span class="line">    new_pop = []  # 初始化新的种群</span><br><span class="line">    for father in pop:  # 遍历种群中的每一个个体</span><br><span class="line">        child = father.copy()  # 复制个体作为孩子的初始基因</span><br><span class="line">        if np.random.rand() &lt; CROSSOVER_RATE:  # 以交叉率的概率进行交叉</span><br><span class="line">            mother = pop[np.random.randint(POP_SIZE)]  # 随机选择另一个个体作为母亲</span><br><span class="line">            cross_points = np.random.randint(low=0, high=DNA_SIZE * 2)  # 随机选择交叉点</span><br><span class="line">            child[cross_points:] = mother[cross_points:]  # 孩子继承母亲的基因</span><br><span class="line">        mutation(child)  # 对孩子进行变异</span><br><span class="line">        new_pop.append(child)  # 将新个体添加到新种群中</span><br><span class="line">    return np.array(new_pop)  # 返回新的种群</span><br><span class="line"></span><br><span class="line"># 变异函数</span><br><span class="line">def mutation(child, MUTATION_RATE=MUTATION_RATE):</span><br><span class="line">    if np.random.rand() &lt; MUTATION_RATE:  # 以变异率的概率进行变异</span><br><span class="line">        mutate_point = np.random.randint(0, DNA_SIZE * 2)  # 随机选择变异点</span><br><span class="line">        child[mutate_point] = np.logical_xor(child[mutate_point], 1)  # 反转变异点的基因</span><br><span class="line"></span><br><span class="line"># 选择函数，根据适应度选择个体</span><br><span class="line">def select(pop, fitness):</span><br><span class="line">    idx = np.random.choice(np.arange(POP_SIZE), size=POP_SIZE, replace=True, p=(fitness / fitness.sum()))  # 根据适应度比例选择个体</span><br><span class="line">    return pop[idx]</span><br><span class="line"></span><br><span class="line"># 打印信息函数，输出当前种群的状态</span><br><span class="line">def print_info(pop):</span><br><span class="line">    fitness = get_fitness(pop)  # 计算适应度</span><br><span class="line">    max_fitness_index = np.argmax(fitness)  # 找到最大适应度的索引</span><br><span class="line">    print(&quot;max_fitness:&quot;, fitness[max_fitness_index])  # 打印最大适应度</span><br><span class="line">    x, y = translateDNA(pop)  # 转换DNA为坐标</span><br><span class="line">    print(&quot;最优的基因型：&quot;, pop[max_fitness_index])  # 打印最优个体的基因型</span><br><span class="line">    print(&quot;(x, y):&quot;, (x[max_fitness_index], y[max_fitness_index]))  # 打印最优个体的坐标</span><br><span class="line">    print(F(x[max_fitness_index], y[max_fitness_index]))  # 打印最优个体的函数值</span><br><span class="line"></span><br><span class="line"># 程序的主执行部分</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    fig = plt.figure()  # 创建一个新的图形</span><br><span class="line">    ax = fig.add_axes(Axes3D(fig))  # 添加一个3D坐标轴</span><br><span class="line">    plt.ion()  # 设置绘图模式为交互模式</span><br><span class="line">    plot_3d(ax)  # 绘制3D曲面</span><br><span class="line"></span><br><span class="line">    pop = np.random.randint(2, size=(POP_SIZE, DNA_SIZE * 2))  # 初始化种群</span><br><span class="line">    for _ in range(N_GENERATIONS):  # 进行N_GENERATIONS代进化</span><br><span class="line">        x, y = translateDNA(pop)  # 转换DNA为坐标</span><br><span class="line">        sca = ax.scatter(x, y, get_fitness(pop), c=&#x27;black&#x27;, marker=&#x27;o&#x27;)  # 在3D图上绘制当前种群</span><br><span class="line">        plt.show()  # 显示图形</span><br><span class="line">        plt.pause(0.1)  # 暂停0.1秒</span><br><span class="line">        pop = crossover_and_mutation(pop)  # 交叉和变异操作</span><br><span class="line">        fitness = get_fitness(pop)  # 计算适应度</span><br><span class="line">        pop = select(pop, fitness)  # 选择操作，生成新的种群</span><br><span class="line"></span><br><span class="line">    print_info(pop)  # 打印最终的种群信息</span><br><span class="line">    plt.ioff()  # 关闭交互模式</span><br><span class="line">    plot_3d(ax)  # 重新绘制3D曲面</span><br></pre></td></tr></table></figure>
<p><img src="https://cloud.yuchu.me/f/0WHm/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%951.jpg"></p>
<p><img src="https://cloud.yuchu.me/f/gRIG/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%952.jpg"></p>
<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>这段代码是一个遗传算法（Genetic Algorithm, GA）的实现，用于解决优化问题。遗传算法是一种启发式搜索算法，模仿自然选择的过程来找到问题的近似解。在这个例子中，算法的目标是寻找一个二维点 (x, y)，使得给定的函数 F(x, y) 达到最小值。这个函数是一个典型的测试函数，称为香蕉函数（Banana Function），用于测试优化算法的性能。</p>
<p>以下是代码的主要组成部分及其功能解释：</p>
<ol>
<li><p>初始化参数：定义了DNA的大小（DNA_SIZE），种群的大小（POP_SIZE），交叉率（CROSSOVER_RATE），变异率（MUTATION_RATE），进化代数（N_GENERATIONS），以及搜索空间的边界（X_BOUND 和 Y_BOUND）。</p>
</li>
<li><p>目标函数 F(x, y)：这是需要优化的函数，输入是 x 和 y 坐标，输出是一个数值。遗传算法的目标是找到使这个函数值最小的 (x, y) 点。</p>
</li>
<li><p>绘图函数 plot_3d(ax)：使用 matplotlib 库绘制目标函数的三维图形，帮助我们直观地理解函数形状和搜索空间。</p>
</li>
<li><p>适应度函数 get_fitness(pop)：计算种群中每个个体的适应度。适应度是根据目标函数值来评估的，这里直接使用了目标函数 F(x, y) 的值。</p>
</li>
<li><p>DNA 转换函数 translateDNA(pop)：将二进制编码的DNA转换为实数解（x 和 y 坐标）。这是通过将DNA中的每一位乘以2的相应幂次然后求和来实现的。</p>
</li>
<li><p>交叉和变异函数 crossover_and_mutation(pop)：对种群中的个体执行交叉和变异操作。交叉是遗传算法中的一种操作，它模仿生物遗传中的交叉过程，通过交换父代的基因来产生新的后代。变异是另一种操作，它通过随机改变基因的值来引入种群的多样性。</p>
</li>
<li><p>选择函数 select(pop, fitness)：根据个体的适应度来选择下一代种群。适应度更高的个体有更大的概率被选中。</p>
</li>
<li><p>打印信息函数 print_info(pop)：输出当前种群中适应度最高的个体及其对应的 (x, y) 坐标和函数值。</p>
</li>
<li><p>主程序：初始化种群，然后进行多代进化。每一代都会计算种群的适应度，执行交叉和变异操作，然后选择新的种群。同时，会实时更新并显示当前种群在目标函数上的分布情况。</p>
</li>
</ol>
<p>这段代码展示了遗传算法的基本流程，包括初始化、适应度计算、选择、交叉、变异和新一代种群的生成。通过多次迭代，算法逐渐找到使目标函数值最小化的解。这种方法在解决复杂的优化问题时非常有用，尤其是当问题的解空间很大或者目标函数难以直接优化时。</p>
<h2 id="算法应用"><a href="#算法应用" class="headerlink" title="算法应用"></a>算法应用</h2><ol>
<li><p>若只有选择和交叉，而没有变异，则无法在初始基因组合以外的空间进行搜索，使进化过程在早期就陷入局部解而进入终止过程，从而影响解的质量。为了在尽可能大的空间中获得质量较高的优化解，必须采用变异操作。</p>
</li>
<li><p>交叉率的取值范围：一般为0.4～0.99，变异率的取值范围：一般为0.0001～0.1</p>
</li>
<li><p>终止条件 第一种：迭代次数 第二种：当目标函数是方差这一类有最优目标值的问题时，可采用控制偏差的方法实现终止。一旦遗传算法得出的目标函数值（适应度）与实际目标值之差小于允许值后，算法终止。 第三种：检查适应度的变化。在遗传算法后期，一旦最优个体的适应度没有变化或变化很小时，即令计算终止。</p>
</li>
<li><p>遗传算法的另一个重要参数是每代群体中的个体数。很明显，个体数目越多，搜索范围越广，容易获取全局最优解。然而个体数目太多，每次迭代时间也长。通常，个体数目可取100-1000之间。</p>
</li>
<li><p>应用领域</p>
</li>
</ol>
<ul>
<li>函数优化 函数优化是遗传算法的经典应用领域，也是遗传算法进行性能评价的常用算例。尤其是对非线性、多模型、多目标的函数优化问题，采用其他优化方法较难求解，而遗传算法却可以得到较好的结果。 </li>
<li>组合优化。 随着问题的增大，组合优化问题的搜索空间也急剧扩大，采用传统的优化方法很难得到最优解。遗传算法是寻求这种满意解的最佳工具。例如，遗传算法已经在求解旅行商问题、背包问题、装箱问题、图形划分问题等方面得到成功的应用. </li>
<li>生产调度问题 在很多情况下，采用建立数学模型的方法难以对生产调度问题进行精确求解。在现实生产中多采用一些经验进行调度。遗传算法是解决复杂调度问题的有效工具，在单件生产车间调度、流水线生产车间调度、生产规划、任务分配等方面遗传算法都得到了有效的应用。 </li>
<li>自动控制。 在自动控制领域中有很多与优化相关的问题需要求解，遗传算法已经在其中得到了初步的应用。例如，利用遗传算法进行控制器参数的优化、基于遗传算法的模糊控制规则的学习、基于遗传算法的参数辨识、基于遗传算法的神经网络结构的优化和权值学习等。 </li>
<li>机器人 例如，遗传算法已经在移动机器人路径规划、关节机器人运动轨迹规划、机器人结构优化和行为协调等方面得到研究和应用。 </li>
<li>图像处理 遗传算法可用于图像处理过程中的扫描、特征提取、图像分割等的优化计算。目前遗传算法已经在模式识别、图像恢复、图像边缘特征提取等方面得到了应用。</li>
</ul>
<ol start="6">
<li>遗传算法的基本特征</li>
</ol>
<ul>
<li>智能式搜索 遗传算法的搜索策略，既不是盲目式的乱搜索，也不是穷举式的全面搜索，它是有指导的搜索。指导遗传算法执行搜索的依据是适应度，也就是它的目标函数。利用适应度，使遗传算法逐步逼近目标值。 </li>
<li>渐进式优化 遗传算法利用复制、交换、突变等操作，使新一代的结果优越于旧一代，通过不断迭代，逐渐得出最优的结果，它是一种反复迭代的过程。 </li>
<li>全局最优解 遗传算法由于采用交换、突变等操作，产生新的个体，扩大了搜索范围，使得搜索得到的优化结果是全局最优解而不是局部最优解。 </li>
<li>黑箱式结构 遗传算法根据所解决问题的特性，进行编码和选择适应度。一旦完成字符串和适应度的表达，其余的复制、交换、突变等操作都可按常规手续执行。个体的编码如同输入，适应度如同输出。因此遗传算法从某种意义上讲是一种只考虑输入与输出关系的黑箱问题。 </li>
<li>通用性强 传统的优化算法，需要将所解决的问题用数学式子表示，常常要求解该数学函数的一阶导数或二阶导数。采用遗传算法，只用编码及适应度表示问题，并不要求明确的数学方程及导数表达式。因此，遗传算法通用性强，可应用于离散问题及函数关系不明确的复杂问题，有人称遗传算法是一种框架型算法，它只有一些简单的原则要求，在实施过程中可以赋予更多的含义。 </li>
<li>并行式算法 遗传算法是从初始群体出发，经过复制、交换、突变等操作，产生一组新的群体。每次迭代计算，都是针对一组个体同时进行，而不是针对某个个体进行。因此，尽管遗传算法是一种搜索算法，但是由于采用这种并行机理，搜索速度很高。这种并行式计算是遗传算法的一个重要特征。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/378906456">https://zhuanlan.zhihu.com/p/378906456</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>遗传算法</tag>
      </tags>
  </entry>
  <entry>
    <title>通过油猴插件无限白嫖VecMulChat的gpt4o，claude3.5s等最新大模型</title>
    <url>/posts/77e9/</url>
    <content><![CDATA[<p>今天在<code>Linuxdo</code>闲逛时发现<a href="https://linux.do/t/topic/162476">一篇帖子</a>，说是使用某个网站+油猴脚本可以实现<code>GPT4o</code>和<code>claude3.5sonnet</code>等一众最新先进大模型的无限制白嫖（暂时），如果不依赖脚本，仅正常登录使用，每天也能进行50次的对话，本着好东西应该分享的原则，水一篇博客，帮大家也用上**:laughing:**</p>
<p>首先是网站地址：<br><a href="https://www.vecmul.com/">https://www.vecmul.com/</a></p>
<p>进入后不要登录，先安装这个油猴脚本：<br><a href="https://greasyfork.org/zh-CN/scripts/502074-vecmul%E6%97%A0%E9%99%90%E5%AF%B9%E8%AF%9D">https://greasyfork.org/zh-CN/scripts/502074-vecmul%E6%97%A0%E9%99%90%E5%AF%B9%E8%AF%9D</a></p>
<p>之后点击编辑</p>
<p><img src="https://cdn.jsdelivr.net/gh/mazhijia/jsdeliver@main/img/image-20240729234408576.png" alt="image-20240729234408576"></p>
<p>把下面的代码替换进去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         将聊天请求计数保持为零</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.5</span></span><br><span class="line"><span class="comment">// @description  始终将localStorage中chat-request项的计数保持为0</span></span><br><span class="line"><span class="comment">// @match        https://www.vecmul.com/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">keepCountAtZero</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> chatRequest = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;chat-request&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (chatRequest) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(chatRequest);</span><br><span class="line">                <span class="keyword">if</span> (data.<span class="property">count</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    data.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;chat-request&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;解析chat-request时出错:&#x27;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始执行</span></span><br><span class="line">    <span class="title function_">keepCountAtZero</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写localStorage的setItem方法</span></span><br><span class="line">    <span class="keyword">const</span> originalSetItem = <span class="title class_">Storage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setItem</span>;</span><br><span class="line">    <span class="title class_">Storage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setItem</span> = <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">        originalSetItem.<span class="title function_">call</span>(<span class="variable language_">this</span>, key, value);</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;chat-request&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">keepCountAtZero</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;聊天请求计数将始终为零。&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>在返回原来那个网站，就可以实现无限制白嫖gpt4o啦，快去试试吧**:laughing:**</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>gpt4o</tag>
        <tag>claude3.5sonnet</tag>
        <tag>VecMul Chat</tag>
      </tags>
  </entry>
</search>
